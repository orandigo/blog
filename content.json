{"pages":[{}],"posts":[{"title":"Hexo 站內搜尋","text":"搜尋工具套用的 Theme 網頁內有搜尋功能，但只套用 Theme 還沒安裝相關的插件之前，是不能使用的 在 _config.yml 找到設定 123search: insight: true swiftype: 使用 NPM 套件 insight : 需要再安裝 hexo-generator-json-content 才能使用 swiftype : 站內搜尋 需要注冊帳號才能使用 Swiftype 搜尋的 NPM 套件 hexo-generator-search 產生 xml 檔案，可用在 atom.xml hexo-generator-json-content 產生 json 檔案 安裝 : 當執行 hexo s 或 hexo g 時會一起自動執行 1npm i -S hexo-generator-json-content 預設會產生的 json 檔\u0013 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647meta: &#123; //-&gt; 基本設定 title: hexo.config.title, subtitle: hexo.config.subtitle, description: hexo.config.description, author: hexo.config.author, url: hexo.config.url&#125;,pages: [&#123; //-&gt; 全部頁面的統一格式 title: page.title, slug: page.slug, date: page.date, updated: page.updated, comments: page.comments, permalink: page.permalink, path: page.path, excerpt: page.excerpt, //-&gt; only text ;) keywords: null, //-&gt; it needs settings text: page.content, //-&gt; only text minified ;) raw: page.raw, //-&gt; original MD content content: page.content, //-&gt; final HTML content author: page.author&#125;],posts: [&#123; //-&gt; 全部發佈文章的統一格式 title: post.title, slug: post.slug, date: post.date, updated: post.updated, comments: post.comments, permalink: post.permalink, path: post.path, excerpt: post.excerpt, //-&gt; only text ;) keywords: null, //-&gt; it needs settings text: post.content, //-&gt; only text minified ;) raw: post.raw, //-&gt; original MD content content: post.content, //-&gt; final HTML content author: post.author, categories: [&#123; //-&gt; 分類 name: category.name, slug: category.slug, permalink: category.permalink &#125;], tags: [&#123; //-&gt; 標籤 name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;]&#125;] 預設產生的資料多但不一定會用到，可以只選擇需要搜尋的資料就好 到 _config.yml 加入下面的設定 1234567891011121314151617181920212223242526272829303132333435363738jsonContent: meta: true drafts: false # 是否搜尋草稿 file: custom-file-name.json # 有預設檔名，也可自訂。 keywords: undefined dateFormat: undefined # DD/MM/YYYY pages: title: false slug: false date: false updated: false comments: false path: false link: false permalink: false excerpt: false keywords: false text: false raw: false content: false author: false posts: title: true # 標題 slug: false date: false # 日期 updated: false comments: false path: false # 路徑 link: false permalink: false excerpt: false keywords: true text: true # 內文 raw: false content: false author: false categories: false tags: false"},{"title":"Hexo 主題設定","text":"資料夾架構跟 Hexo 要建立文章相關的資料夾 public 資料夾 - 生成靜態網站 scaffolds 資料夾 - 樣版 source / _posts 資料夾 - 文章內容都放在這裡 12345678910111213141516171819├── .deploy_git├── .git├── node_modules├── public # hexo g 生成靜態網站├── scaffolds # 指令產生的草稿、頁面、文章都會依照資料夾內的文件建立| ├── draft.md| ├── page.md| └── post.md # 生成文章的樣版├── source| ├── _drafts| └── _posts # 文章資料夾├── themes # theme 版型資料夾| └── landscape # 預設 theme| └── _config.yml # 版型樣式 設定├── .gitignore├── _config.yml # 基本部署 設定├── db.json├── package.json└── package-lock.json 基本部署 設定 版型列表 - https://hexo.io/themes/ 編寫格式為 yaml 內容 “ : “ 後面都必需保留一格半型空格 預設設定 12345678910111213141516171819202122232425262728# Sitetitle: 標題 / 網站名subtitle: 副標題 / 顯示在頁首description: 網站描述 (SEO、告訴搜尋引擎這個網站的描述)keywords: 關鍵字author: 作者language: 網站語言 (台灣:zh-tw)timezone: 時區# URL# 例如 url 是 'http://UserName.github.io/repository/'# root 就是倉庫名稱 '/repository/'url: http://UserName.github.io/root: /repositorypermalink: 文章網址的永久連結格式(預設使用 YYYY\\MM\\DD\\文章名稱)/permalink_defaults: 永久連結網址的預設值# 格式可參考官方教學# https://hexo.io/zh-tw/docs/permalinks.html# Extensions theme: 套用版型# Deployment 上傳路徑deploy: type: git repository: 部署的儲存庫路徑 / https://github.com/UserName/repository.git branch: gh-pages 分支 message: 部署訊息 避免出錯，在每次的修改設定後，都需要再執行清除先前的資料 1hexo clean 清除後再生成新的資料 12345hexo generate # 產生新的靜態檔案hexo deploy # 發布至遠端# 簡短的指令hexo d -g # 生成 public 並提交 文章佈局 預設佈局 layout post : 文章 page : 頁面 draft : 草稿 鷹架 Scaffold : 可依照文章需要的格式去新增文章，就不用再微調 這會依照 scaffolds 資料夾內建立好的預設檔案新增文章 123hexo new photo \"My Gallery\"# photo 是必須事先建立編排好的格式 .md 檔案# \"My Gallery\" 是新增的文章檔名 新增草稿在 Bash 輸入指令後會建立在 source / _drafts / 資料夾內 1hexo new draft 文章名稱 只要在草稿 _drafts 資料夾內的文章，預設是不會出現在網頁上 草稿轉文章輸入執行 layout 是要移動到的佈局、title 是要移動的檔名 1hexo publish [layout] &lt;title&gt; 就會發現草稿的檔案和相關連資料夾會一起移動到 _posts 資料夾 另外也可以手動搬移，只要從 _drafts 把文章放到 _posts 資料夾內就可以了 新增文章在 Bash 輸入指令後會建立在 source / _posts / 資料夾內 1hexo new 文章名稱 文章都是用 Markdown 語法撰寫 刪除文章 只要到 source / _post 刪除本地文件 執行清除資料夾再上傳，文章就會不見了 123hexo cleanhexo ghexo d 建立頁面和文章不同，這是在建立 theme 的 menu 頁面 archives、categories、tags、about … 在沒建立前，新增的 menu 都會出現 404 頁面 所以在 _config.yml 內 12345678910menu: Home: / # 下面新增的 menu ，都需要產生頁面 Archives: /archives Categories: /categories Tags: /tags About: /about Link: /link ... 在 Bash 執行產生 1hexo new page 頁面名稱 需要在這些頁面隱藏留言、評論功能時，就需加上 comments: false 關閉 123title: categoriesdate: 2020-03-07 12:34:56comments: false categories 分類頁面在 Bash 輸入 1hexo new page categories 在產生的 source/categories/inex.md 儲存以下內容 123title: categoriesdate: 2020-03-07 22:52:41type: &quot;categories&quot; 如何使用分類，只要在文章開頭加上 categories 和分類名稱就可以了 若是有 2 個以上分類時注意，要使用中括號 “ [ ] “ ，陣列型式包著分類名稱 123456789101112131415# 陣列中只有一個名稱時，像下面例子會是 2 個分類categories: - [Dog] - [Cat] # 陣列中有 2 個名稱時，這會是一個有上下層關連的分類categories:- [Animal, Dog] # Animal 是父層，Dog 是子層- [Animal, Cat]# 錯誤的分類，沒使用中括號時 Dog 是父層、 Cat 是在 Dog 下的子層# 像下面例子就只會是 1 個分類categories: - Dog - Cat tags 頁面在 Bash 輸入 1hexo new page tags 在產生的 source/tags/inex.md 儲存以下內容 123title: tagsdate: 2019-04-01 22:55:41type: \"tags\" 在文章開頭加上 tags 和標籤，當多個標籤時只要像下面作法就可以了 1234567891011# 一個 tagtags: Dog# 多個 tagtags:- Dog- Cat- Bear- Fox- Bat- Deer about 關於頁面1hexo new page about 編輯 source /about/ index.md 內容 若是沒出現 about 選單的話，可能是沒開啟 about 頁 到 themes/ 套用版型名稱 /_config.yml 移除 menu &gt; about 前的 # 註解就會看到 12menu: about: /about"},{"title":"安裝 Hexo","text":"Hexo需要使用到基本 git 上傳指令以及修改 Yaml 格式環境設定 文章撰寫使用 Markdown 格式 http://markdown.tw/ Hexo 安裝 必需在 Node.js 環境下 123456# 安裝 hexo CLI - Hexo 指令工具npm install -g hexo-cli# install hexo 自動部署工具# 沒安裝時會出現 ERROR Deployer not found: git 錯誤npm install hexo-deployer-git --save 建立一個 Hexo 雛形 123# 建立 Hexo 環境hexo initnpm install 開啟本地預覽 打開 http://localhost:4000 就可看到建立好的網頁 1hexo server 到這裡為止就完成一個可觀看的簡單 Hexo 頁面 在部署 Hexo 到 GitHub 上前，要先上傳 Hexo 原始碼到 branch: master 分支 之後才部署 Hexo 編譯後的頁面到 branch: gh-pages 分支 部署至 GitHub branch: gh-pages 分支 上傳前先修改 _config.yml 的 deploy 1234deploy: type: git repo: git@github.com: UserName &#x2F; repository .git branch: gh-pages 12hexo g # 生成 public 靜態檔案hexo d # 部署至 Github Pages 部署兩個站點 1234567891011121314151617181920# 絕對路徑改成相對路徑，修改 _config.ymlrelative_link: true# 另外設定 domain # gh-pages/CNAME # ex bootstrap4 中文版 link # https://github.com/hexschool/bootstrap_zh# 部署要點： # &#123;用戶名稱&#125;.github.io # 儲存庫名稱：&#123;用戶名稱&#125;.github.io # ex Wcc723.github.io # link: https://Wcc723.github.io # 每個帳戶只有一個，能放在最根目錄的專案 # Branch ：master # &#123;用戶名稱&#125;.github.io/&#123;專案名稱&#125; # 儲存庫名稱：&#123;用戶名稱&#125;.github.io/&#123;專案名稱&#125; # ex Wcc723.github.io/&#123;專案名稱&#125; # 任意、無數量限制 # Branch ：gh-pages 更新內容上傳 12345hexo ghexo d# 或是只執行下面一行也可以hexo d -g 上傳出錯時可能的問題 靜態檔案 public 生成出錯 - 只要清除先前建立的靜態檔案，再重新生成一次後上傳 123hexo cl # 清除之前建立的靜態檔案，也可以輸入 hexo cleanhexo g # 建立靜態檔案 [public 生成]，也可以輸入 hexo generatehexo d # 部署至 Github Pages，也可以輸入 hexo deploy 其他指令 建立新的空文章格式 1hexo new \"My_New_Post\" git 上傳 Hexo 原始碼 git 基本只會用到的指令 1234567891011121314151617# 本地端git initgit add.git commit -m \"git init\"# 上傳到 Github# push branch: master → 原始碼# git remote add origin git@github.com:Wcc723/hexo-demo-1114.git // 儲存庫路徑git remote add origin 儲存庫路徑 # 這裡要修改上傳的儲存庫路徑# git push -u origin master // branch:mastergit push -u origin master# 出錯問題# 推到 Git 出錯 - 有可能是先前資料卡住，先刪記錄後再推一次git remote rm origin# 再不能上傳, 有可能是金鑰錯誤# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/"},{"title":"Chart.js 自訂設計 (一)","text":"Chart.js 自訂設計 type 是圖表的樣式 \u0016樣式有線圖、長條圖、圓餅圖、雷達圖 … 可使用樣式: https://www.chartjs.org/docs/latest/charts/ data 內放的是要用圖表呈現的資料名稱、數值 options 是設定個別樣式 1234567891011121314151617181920var ctx = document.getElementById('myChart').getContext('2d');var chart = new Chart(ctx, &#123; type: 'line', data: &#123; // 要呈現的資料 labels: ['1月', '2月', '3月', '4月', '5月'], // 水平軸 datasets: [ &#123; label: 'Apple', // 資料的標題標籤 data: [10, 15, 20, 25, 30] &#125;,&#123; label: 'Pear', data: [3, 6, 9, 12, 15] &#125; ] &#125; options: &#123; // 自訂屬性設定 &#125;&#125;); 標題123456789options: &#123; title: &#123; display: true, text: '農場收成量', fontColor: 'blue', fontSize: '24', position: 'bottom', // 標題位置 &#125;&#125; 資料的標題標籤123456options: &#123; legend: &#123; // 資料標籤的位置 display: true, position: 'right' &#125;&#125; 垂直軸標籤123456789101112131415161718192021222324options: &#123; scales: &#123; // 縮放屬性 yAxes: [&#123; // 設定垂直軸 [使用陣列方式] type: 'myScale', // this is the same key that was passed to the registerScaleType function ticks: &#123; // 設定間隔數值 // 固定數值 min: 0, // 最小是 0 max: 2000, // 建議數值 suggestedMin: 0, suggestedMax: 2000, // 值間隔 stepSize: 400, // 增加數值文字 callback: function (value, index, values) &#123; return value + '萬顆'; &#125; &#125; &#125;] &#125;&#125; 相關說明https://www.chartjs.org/docs/latest/developers/axes.html 動畫效果123456options: &#123; animation: &#123; duration: 1000, easing: 'easeOutQuart' &#125;&#125; 動畫相關說明https://www.chartjs.org/docs/latest/configuration/animations.html easing 屬性還有其他可使用項目https://www.chartjs.org/docs/latest/configuration/animations.html#easing"},{"title":"Chart.js 圖表繪製","text":"這是使用 &lt;canvas&gt; tag 繪製的圖表 JavaScript library 簡單又容易應用，也支援動畫的效果 載入 Chart.js 下載 到 Chart.js 下載 GitHub 下載 CDNJS 12&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"path/to/chartjs/dist/Chart.min.css\"&gt;&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.js\"&gt;&lt;/script&gt; npm 1npm install chart.js --save Bower 1bower install chart.js --save 載入的模組有 2 種 Stand-Alone Build : 不包括 Moment.js，若是會使用到時間軸就必需額外再下載 Bundled Build : 包括 Chart.js 專用的 Moment.js 若是先前已經載入過 Moment.js ，為了避免衝突出錯就不建議使用 Bundled Build 會在圖表以外使用時間軸功能，建議是用 Stand-Alone Build 再另外載入 Moment.js 基本的 Chart 圖表在 HTML 建立 &lt;canvas&gt; 1&lt;canvas id=\"myChart\" width=\"400\" height=\"300\"&gt;&lt;/canvas&gt; 12345678910111213141516171819202122232425262728293031323334353637383940var ctx = document.getElementById('myChart').getContext('2d');var myChart = new Chart(ctx, &#123; // 各式圖表的屬性設定 type: 'bar', data: &#123; labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'], datasets: [&#123; label: '# of Votes', data: [12, 19, 3, 5, 2, 3], backgroundColor: [ 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)' ], borderColor: [ 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)' ], borderWidth: 1 &#125;] &#125;, options: &#123; scales: &#123; yAxes: [&#123; ticks: &#123; beginAtZero: true &#125; &#125;] &#125; &#125; &#125;); 參數設定 可設定視覺樣式、觸發事件、互動效果，關於參數設定可參考 文件 Web Accessibility 無障礙輔助功能 : 可在 HTML 標籤內加入 role、aria-label 的輔助功能 HTML &lt;canvas&gt; Accessibility 相關連接 Chart.js: https://www.chartjs.org/ GitHub: https://github.com/chartjs/Chart.js 使用說明 https://www.chartjs.org/docs/latest/ GitBook 簡體中文: https://chartjs-doc.abingoal.com/"}]}