{"meta":{"title":"前端筆記","subtitle":"","description":"","author":"Orange","url":"https://orandigo.github.io","root":"/blog/"},"pages":[{"title":"關於我","date":"2020-03-07T20:52:39.000Z","updated":"2020-07-03T15:55:04.378Z","comments":true,"path":"about/index.html","permalink":"https://orandigo.github.io/about/index.html","excerpt":"","text":"這裡記錄著學習的工具和知識 大多還是以筆記記錄為主 朝向能寫出教學文為目的的文章 「挑戰困難、突破瓶頸、創造價值」天下文化 當壓力來敲門，該如何面對？ - 遠見‧天下文化事業群"}],"posts":[{"title":"在 HEXO 增加搜尋功能","slug":"20200920-hexo-search","date":"2020-09-20T14:18:57.000Z","updated":"2020-09-20T14:33:01.201Z","comments":true,"path":"2020/09/20/20200920-hexo-search/","link":"","permalink":"https://orandigo.github.io/2020/09/20/20200920-hexo-search/","excerpt":"","text":"安裝插件1npm install hexo-generator-searchdb --save HEXO 資料夾內的 _config.yml 增加搜尋設定 123456search: path: search.xml field: post format: html # 設定搜尋的文件量，當文章量多時可以設定高些 limit: 100 再到 /themes/ 使用的樣版名 /_config.yml 開啟設定功能 12local_search: enable: true 錯誤情況沒效果可以先清除暫存再重開一次網頁 12hexo cleanhexo s 一直是 loading 的情況查看 search.xml 是否正確 https://localhost:4000/search.xml","categories":[],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"canvas 圖形拖移","slug":"20200913-canvas-drag","date":"2020-09-13T12:06:56.000Z","updated":"2020-09-13T18:30:09.680Z","comments":true,"path":"2020/09/13/20200913-canvas-drag/","link":"","permalink":"https://orandigo.github.io/2020/09/13/20200913-canvas-drag/","excerpt":"前言canvas 可增加圖形、文字到畫板，但當位置想要移動時就要回到 Javascript 內修改，所以找了一下有沒有可以直接拖移圖形的方式，發現可以用 isDragging 打開拖移功能並取得圖形的設定值，在點擊圖形時就執行變更設定達到移動的目的。","text":"前言canvas 可增加圖形、文字到畫板，但當位置想要移動時就要回到 Javascript 內修改，所以找了一下有沒有可以直接拖移圖形的方式，發現可以用 isDragging 打開拖移功能並取得圖形的設定值，在點擊圖形時就執行變更設定達到移動的目的。 筆記初始值 123456789// 拖移的變數var isDragging = false;var startX, startY;// 存放圖形、圖片 的陣列var shapes=[];// 當移動圖形時記錄的變數var selectedShapeIndex; 載入圖形因為需要判斷滑鼠是否在圖形上，所以就不是用 canvas 原本的方式 12345678910// 圓形ctx.fillStyle=\"#FF0000\";ctx.beginPath();ctx.arc(30, 30, 15, 0, 2*Math.PI);ctx.closePath();ctx.fill();// 矩形ctx.fillStyle = \"#0000ff\";ctx.fillRect(100, -1, 75, 35); 而是先建立 陣列 和 物件 組合的方式 123456789101112// 建立一個陣列，存放設定圖形的物件var shapes=[];// 置入 shapes 一個藍色圓形的物件shapes.push( &#123;x:30, y:30, radius:15, color:'blue'&#125; );// 置入 shapes 一個紅色矩形的物件shapes.push( &#123;x:100, y:-1, width:75, height:35, color:'red'&#125; );// 滑鼠事件ctx.onmousedown = handleMouseDown;ctx.onmousemove = handleMouseMove;ctx.onmouseup = handleMouseUp;ctx.onmouseout = handleMouseOut; 再產生圖形 1234567891011121314151617181920// 把陣列的物件畫到 canvasdrawAll();function drawAll()&#123; ctx.clearRect(0, 0, cw, ch); for(var i = 0; i &lt; shapes.length; i++)&#123; var shape = shapes[i]; if(shape.radius)&#123; // 當有 radius 的值時，產生圓形 ctx.beginPath(); ctx.arc(shape.x, shape.y, shape.radius, 0, Math.PI*2); ctx.fillStyle = shape.color; ctx.fill(); &#125;else if(shape.width)&#123; // 當有 width 的值時，產生矩形 ctx.fillStyle = shape.color; ctx.fillRect(shape.x, shape.y, shape.width, shape.height); &#125; &#125;&#125; 載入文字所以也可以載入文字 123456789// 置入文字的物件shapes.push(&#123;x:50, y:50, text:'文字拖移', fontSize: 36&#125;); if(shape.text)&#123; // 當 text 有值時，產生文字 ctx.textBaseline = 'top'; ctx.font = shape.fontSize + \"px impact\"; ctx.fillText(shape.text, shape.x, shape.y);&#125; 載入圖片載入圖片也可以置入到陣列中 12345678910111213var card = new Image();card.onload = function()&#123; // 置入 shapes 一個圖片 的物件 shapes.push( &#123;x:30, y:10, width:127, height:150, image:card&#125; ); // 載入畫面 drawAll(); // 滑鼠事件 ctx.onmousedown = handleMouseDown; ctx.onmousemove = handleMouseMove; ctx.onmouseup = handleMouseUp; ctx.onmouseout = handleMouseOut;&#125;;card.src = 'card.png'; 判斷滑鼠是否在範圍12345678910111213141516171819202122232425262728293031323334353637383940function isMouseInShape(mx, my, shape)&#123; // 圓形範圍 if(shape.radius)&#123; var dx = mx - shape.x; var dy = my - shape.y; if(dx*dx + dy*dy &lt; shape.radius*shape.radius)&#123; return(true); &#125; &#125;else if(shape.width)&#123; // 矩形範圍 var rLeft = shape.x; var rRight = shape.x + shape.width; var rTop = shape.y; var rBott = shape.y + shape.height; if( mx &gt; rLeft &amp;&amp; mx &lt; rRight &amp;&amp; my &gt; rTop &amp;&amp; my &lt; rBott)&#123; return(true); &#125; &#125;else if(shape.image)&#123; // 圖片範圍和矩形範圍相同，所以一起使用時要區分使用的變數 var rLeft = shape.x; var rRight = shape.x + shape.imgWidth; var rTop = shape.y; var rBott = shape.y + shape.imgHeight; // 判斷滑鼠是否在範圍內 if( mx &gt; rLeft &amp;&amp; mx &lt; rRight &amp;&amp; my &gt; rTop &amp;&amp; my &lt; rBott)&#123; return(true); &#125; &#125;else if(shape.text)&#123; // 文字範圍 var rLeft = shape.x; var rRight = shape.x + ctx.measureText(shape.text).width; var rTop = shape.y; var rBott = shape.y + shape.fontSize; // 判斷滑鼠是否在範圍內 if (mx &gt; rLeft &amp;&amp; mx &lt; rRight &amp;&amp; my &gt; rTop &amp;&amp; my &lt; rBott) &#123; return true; &#125; &#125; return(false);&#125; 圖形拖移 滑鼠事件 onmousedown Event 當滑鼠在元素上按下時觸發的事件 onmousemove Event 當滑鼠在元素上移動時觸發的事件 onmouseup 當滑鼠在元素上放開時觸發的事件 onmouseout 當滑鼠離開元素時觸發的事件 元素重疊時，移動就需要停止 默認事件、冒泡事件 默認事件 event.preventDefault() 冒泡事件 event.stopPropagation() 滑鼠在圖形上123456789101112131415161718192021222324252627282930313233343536373839// 點擊時修改 isDragging 成可移動，計算點擊時滑鼠的位置ctx.onmousedown = handleMouseDown;function handleMouseDown(e)&#123; e.preventDefault(); e.stopPropagation(); // 滑鼠位置 startX = parseInt(e.clientX-offsetX); startY = parseInt(e.clientY-offsetY); for(var i = 0; i &lt; shapes.length; i++)&#123; if(isMouseInShape(startX,startY,shapes[i]))&#123; selectedShapeIndex=i; isDragging=true; return; &#125; &#125;&#125;// 移動時修改位置ctx.onmousemove = handleMouseMove;function handleMouseMove(e)&#123; if(!isDragging)&#123;return;&#125; e.preventDefault(); e.stopPropagation(); // 滑鼠位置 mouseX = parseInt(e.clientX-offsetX); mouseY = parseInt(e.clientY-offsetY); // 滑鼠移動後和原本位置的距離 var dx = mouseX - startX; var dy = mouseY - startY; // 移動圖形時修改值 var selectedShape=shapes[selectedShapeIndex]; selectedShape.x += dx; selectedShape.y += dy; drawAll(); // update the starting drag position (== the current mouse position) startX = mouseX; startY = mouseY;&#125; 滑鼠在圖形外當放開 / 移開滑鼠，目的是一樣的 不拖移任何一個物件 ，所以 isDragging 就應該要是 false ，若是 true 時就要成 false . 12345678910111213141516ctx.onmouseup = handleMouseUp;ctx.onmouseout = handleMouseOut;function handleMouseUp(e)&#123; if(!isDragging)&#123; return; &#125; e.preventDefault(); e.stopPropagation(); isDragging = false;&#125;function handleMouseOut(e)&#123; if(!isDragging)&#123;return;&#125; e.preventDefault(); e.stopPropagation(); isDragging = false;&#125; 參考拖動 -畫布- 內的圖像https://riptutorial.com/zh-TW/html5-canvas/example/18920/在-畫布-周圍拖動圖像 滑鼠事件HTML DOM MouseEvent","categories":[],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"CSS Clip-Path 圖片裁切","slug":"20200906-clip-path","date":"2020-09-06T15:32:25.000Z","updated":"2020-09-06T19:00:40.500Z","comments":true,"path":"2020/09/06/20200906-clip-path/","link":"","permalink":"https://orandigo.github.io/2020/09/06/20200906-clip-path/","excerpt":"CSS Clip-Path 圖片裁切clip-path 是 CSS 屬性可以把圖片遮住、隱藏部分不希望被看到，因為載入到網頁的圖片都會是矩形的，所以用 clip-path 裁切簡單的幾何形或是使用SVG 、 path 路徑畫出裁切外框。","text":"CSS Clip-Path 圖片裁切clip-path 是 CSS 屬性可以把圖片遮住、隱藏部分不希望被看到，因為載入到網頁的圖片都會是矩形的，所以用 clip-path 裁切簡單的幾何形或是使用SVG 、 path 路徑畫出裁切外框。 裁切範圍範圍可以是裁切圖形的範圍，也可以向外延伸。 使用的是 HTML 元素時， geometry-box 可以設定 margin-box, border-box, padding-box, content-box 並配合 margin 、padding 向外放大遮住可見的範圍。 使用 SVG 元素時，值可以使用 fill-box, stroke-box, view-box 。 1234567clip-path: margin-box;clip-path: border-box;clip-path: padding-box;clip-path: content-box;clip-path: fill-box;clip-path: stroke-box;clip-path: view-box; 裁切形狀inset 向內裁切inset 內的值可設定 ( 上下 左右 ) 、( 上 右 下 左 ) 兩種 12clip-path: inset(100px 50px);clip-path: inset(100px 50px 100px 50px); 還可以設定圓角 ( 邊距 round 圓角 ) 12clip-path: inset(100px 50px 100px 50px round 20px 10px 15px 25px);clip-path: inset(100px 50px 100px 50px round 20px); circle 圓形值為 ( 半徑 at 圓心 X Y 座標 ) 1clip-path: circle(100px at 125px 125px); ellipse 橢圓形值為 ( X 、Y 軸半徑 at 圓心座標 ) 1clip-path: ellipse(65px 30px at 125px 40px); polygon 多邊形polygon 可裁切多邊形，當設定三個點時就會裁切成三角形 1clip-path: polygon(50% 0%, 0% 100%, 100% 100%); 四方形就是設定四個點 1clip-path: polygon(0 0, 100% 0, 100% 100%, 0% 100%); 五邊形設定五個點 1clip-path: polygon(50% 0%, 100% 38%, 82% 100%, 18% 100%, 0% 38%); 六邊形、七邊形… 等，設定點的位置並依順序連成一個範圍後裁切。 而 polygon 是依照點的順序連線形成範圍，所以可以切出像星星 1clip-path: polygon(50% 0%, 61% 35%, 98% 35%, 68% 57%, 79% 91%, 50% 70%, 21% 91%, 32% 57%, 2% 35%, 39% 35%); 組合裁切設定裁切線位置 + 形狀 可合併寫在一行。 1clip-path: padding-box circle(50px at 0 100px); 使用圖片範圍裁切CSS 載入裁切範圍可直接使用 path() 畫出範圍，但這方法目前只能在 Firefox 觀看到效果，在不支援的瀏覽器中只會看到一個正方形。 1clip-path: path('M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z'); HTML 載入 SVG 裁切範圍HTML 載入 SVG 的圖作為裁切的範圍 123456789&lt;svg&gt; &lt;clipPath id=\"myPath\" clipPathUnits=\"objectBoundingBox\"&gt; &lt;path d=\"M0.5,1 C 0.5,1,0,0.7,0,0.3 A 0.25,0.25,1,1,1,0.5,0.3 A 0.25,0.25,1,1,1,1,0.3 C 1,0.7,0.5,1,0.5,1 Z\" /&gt; &lt;/clipPath&gt;&lt;/svg&gt; 在 CSS 執行裁切 1clip-path: url(#myPath) 參考文件CSS clip-path property - W3Schools clip-path - CSS | MDN clip-path | CSS-Tricks 線上工具 Clippy","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"box-shadow 、 drop-shadow","slug":"20200831-css-shadow","date":"2020-08-31T07:05:59.000Z","updated":"2020-09-06T18:43:25.344Z","comments":true,"path":"2020/08/31/20200831-css-shadow/","link":"","permalink":"https://orandigo.github.io/2020/08/31/20200831-css-shadow/","excerpt":"說明利用 CSS 產生陰影效果的呈現方式有以下 2種，","text":"說明利用 CSS 產生陰影效果的呈現方式有以下 2種， box-shadow 是 CSS 對 HTML 的標籤做效果的屬性，因為標籤是矩形，所以內容不論是文字或是包含透明背景的圖片，呈現的效果都是矩形的陰影。 drop-shadow() 是 filter 屬性的一種濾鏡渲染效果。 filter 的效果可作出類似 photoshop 的亮化、暗化、負片… 的 11 種濾鏡效果。濾鏡效果可參考 filter 變色特效 文字的陰影使用 box-shadow 時，會用 標籤的外框 製作陰影，所以當外框有圓角時也會有效果。 123456.text1 &#123; border-radius: 10px; box-shadow: -2px -2px 2px rgba(180, 180, 180, .3), 3px 3px 5px rgba(0, 0, 0, .3), 10px 10px 10px rgba(0, 0, 0, .2);&#125; 使用 filter: drop-shadow() 時，會以 內容文字的外框 製作陰影，所以就不會是固定的影子效果。 12345.text2 &#123; filter: drop-shadow(-2px -2px 2px rgba(180, 180, 180, .3)) drop-shadow(3px 3px 5px rgba(0, 0, 0, .3)) drop-shadow(10px 10px 10px rgba(0, 0, 0, .2));&#125; 圖片的陰影陰影效果用在圖片也是一樣，box-shadow 也是會呈現矩形的陰影，就算圖片有包含透明的部分也一樣是矩形的陰影。 所以要讓陰影是以有顏色的形狀部分為主，而忽略透明的部分，就可以用 filter: drop-shadow","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"}],"tags":[]},{"title":"jQuery.Lazy() 圖片延遲載入","slug":"20200830-jquery-lazy","date":"2020-08-30T05:41:56.000Z","updated":"2020-08-30T15:54:48.483Z","comments":true,"path":"2020/08/30/20200830-jquery-lazy/","link":"","permalink":"https://orandigo.github.io/2020/08/30/20200830-jquery-lazy/","excerpt":"簡介當頁面的圖片檔案又大又多時，就可以考慮用 Lazy 函式庫做到不一次下載，而是當畫面滑到時才開始下載圖片。","text":"簡介當頁面的圖片檔案又大又多時，就可以考慮用 Lazy 函式庫做到不一次下載，而是當畫面滑到時才開始下載圖片。 這個函式庫除了圖片可以延遲載入，背景也可以。 官網: http://jquery.eisbehr.de/lazy/ 起手式可到官網提供的下載後在網頁內載入 1&lt;script type=\"text/javascript\" src=\"jquery.lazy.min.js\"&gt;&lt;/script&gt; 或是使用 CDN 1234567&lt;!-- jsDeliver --&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;jquery.lazy&#x2F;1.7.9&#x2F;jquery.lazy.min.js&quot;&gt;&lt;&#x2F;script&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdn.jsdelivr.net&#x2F;jquery.lazy&#x2F;1.7.9&#x2F;jquery.lazy.plugins.min.js&quot;&gt;&lt;&#x2F;script&gt; &lt;!-- cdnjs --&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery.lazy&#x2F;1.7.9&#x2F;jquery.lazy.min.js&quot;&gt;&lt;&#x2F;script&gt; &lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;jquery.lazy&#x2F;1.7.9&#x2F;jquery.lazy.plugins.min.js&quot;&gt;&lt;&#x2F;script&gt; 還是 NPM 下載 12$ npm install jquery-lazy$ bower install jquery-lazy 執行載入後就可以用基本的程式碼加入功能使用，依照官網提供的作法，在 HTML 在使用功能的標籤加上相同的 Class Name 就會被 JavaScript 內的 $(&#39;.lazy&#39;).Lazy() 抓到並執行。 12345&lt;!-- load images the lazy way --&gt; &lt;img class=\"lazy\" data-src=\"path/to/image.jpg\" /&gt; &lt;!-- load background images of other element types --&gt; &lt;div class=\"lazy\" data-src=\"path/to/image.jpg\"&gt;&lt;/div&gt; 123$(function() &#123; $('.lazy').Lazy();&#125;); 設定可設定圖片延遲的時間、圖片來源的路徑、設定佔位符、圖片尺寸… ，都可以在 Lazy() 內以物件的形式加入。 預設值 123456789$('.lazy').Lazy(&#123; // 設定屬性值 scrollDirection: 'vertical', effect: 'fadeIn', visibleOnly: true, onError: function(element) &#123; console.log('error loading ' + element.data('src')); &#125;&#125;); 參考文件 http://jquery.eisbehr.de/lazy/#configuration","categories":[{"name":"jQuery","slug":"jQuery","permalink":"https://orandigo.github.io/categories/jQuery/"},{"name":"library","slug":"jQuery/library","permalink":"https://orandigo.github.io/categories/jQuery/library/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Sticky footer 固定頁尾","slug":"20200823-sticky-footer","date":"2020-08-23T15:21:21.000Z","updated":"2020-08-30T18:09:17.833Z","comments":true,"path":"2020/08/23/20200823-sticky-footer/","link":"","permalink":"https://orandigo.github.io/2020/08/23/20200823-sticky-footer/","excerpt":"目的當頁面短時，會因為內容不多而應該保持在頁面最下方頁尾 Footer 區塊向上跑，讓原本每一頁都相同的設計，因為內容的多寡改變；","text":"目的當頁面短時，會因為內容不多而應該保持在頁面最下方頁尾 Footer 區塊向上跑，讓原本每一頁都相同的設計，因為內容的多寡改變； 所以可以用 Sticky Footer 的效果，目的是要保持頁尾 footer 的區塊、列，在瀏覽到頁面內容最後時出現在畫面的最下方，也有提示已經看到最後的用意。 沒效果 使用效果 min-height + margin-bottom在 HTML 內有 內容 wrapper 和 頁尾 footer 的區塊外，還要在內容加上和頁尾同高度的區塊，以避免內容的文字覆蓋在頁尾的區塊上。 12345&lt;div class=\"wrapper\"&gt; Lorem ipsum dolor sit, amet consectetur adipisicing elit. Voluptatibus cum, expedita labore modi possimus exercitationem sapiente quae autem fugiat voluptatem repellendus rerum quisquam, architecto, ratione non est eligendi! Quaerat, cum? &lt;div class=\"fixedFooter\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=\"footer\"&gt;&lt;/div&gt; 在 CSS 設定 html 和 body 設定 100% 的高和 .wrapper 的 CSS 屬性 min-height 一起才會有效果 min-height 是要確保最小的高度，會因為內容不夠自動拉至 100% 的高 margin-bottom 的負值是減掉 .footer 所占的高度，並向上推被減掉的高度，為了總高度不會超過 100% .fixedFooter 是為了修正內容文字覆蓋到頁尾的部分，所以要高度要是頁尾的高度或更高才能正確呈現觀看的效果。 1234567891011121314151617html, body &#123; height: 100%; margin: 0;&#125;.wrapper &#123; min-height: 100%; margin-bottom: -50px;&#125;.fixedFooter &#123; height: 50px;&#125;.footer &#123; background-color: #f80; width: 100%; height: 50px;&#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"實例","slug":"CSS/實例","permalink":"https://orandigo.github.io/categories/CSS/%E5%AF%A6%E4%BE%8B/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"打字練習","slug":"20200809-english-type","date":"2020-08-09T13:09:38.000Z","updated":"2020-08-09T16:26:53.651Z","comments":true,"path":"2020/08/09/20200809-english-type/","link":"","permalink":"https://orandigo.github.io/2020/08/09/20200809-english-type/","excerpt":"目的利用工具加強打字的速度和記憶按鍵的位置，希望能改善打錯字的機率。","text":"目的利用工具加強打字的速度和記憶按鍵的位置，希望能改善打錯字的機率。 線上工具 keybr 英打練習https://www.keybr.com/ typing.io 英打練習https://typing.io/ Typing.tw 線上中打練習https://typing.tw/ keybr 英打練習 keybrhttps://www.keybr.com/ 這是可以使用亂數產生文章或提供文字的方式產生文章，並練習去習慣鍵盤的位置。 除了打字練習也包括 7 種語言和 5 種鍵盤格式可以選擇改變要練習的環境 設定方式在右上的 settings … 內 Keyboard Layout 設定語言和鍵盤 Learning Mode 設定亂數產生或輸入要產生亂數文章的單字 DONE 儲存設定 暫停練習 用滑鼠點文章外的空白處，就會看到像上圖出現 Click to activate … 的字，要繼續時直接打字就可以了。 另外發現也因為可以輸入自訂的單字和文章，所以也能練習邊打字邊記住單字。 typing.io 程式碼練習 typing.iohttps://typing.io/ 這可以模擬用編寫程式碼的方式來練習打字的速度，可以選擇不註冊帳號或免費的方式練習。 模擬的程式語言有 jQuery 、 Bootstrap 、 Git … 可練習，全是使用 open source code ，所以模擬打字時會跟實際的打字感覺接近。 typing.tw 中打練習 Typing.tw https://typing.tw/ 要練習中文可使用這個線上工具試試，這會自動產生內建的文章也會計時，雖然沒有記錄的功能但還是有像下圖的除錯可以知道出錯率和評價。","categories":[],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"用 Canvas 在圖片加上浮水印","slug":"20200802-canvas-watermark","date":"2020-08-02T12:37:30.000Z","updated":"2020-08-02T15:59:21.075Z","comments":true,"path":"2020/08/02/20200802-canvas-watermark/","link":"","permalink":"https://orandigo.github.io/2020/08/02/20200802-canvas-watermark/","excerpt":"目的最近整理出了一批用不上的舊物，保留了接近全新以及完全未使用的物品，就在拍照後要修圖時才發現，開繪圖程式再開檔案加字就花了一點時間，又要把相片壓縮、打字、加浮水印 … ，這又要花了不少時間，加上只是為了縮小圖片加字而去開啟繪圖程式，又是要一張一張相片的做太麻煩了，所以就想到用 Canvas ，直接用 &lt;input type=&quot;file&quot; &gt; 載入圖後，再用按鍵另存成新的圖檔，就可以快速完成，所以接下來就開始實做。","text":"目的最近整理出了一批用不上的舊物，保留了接近全新以及完全未使用的物品，就在拍照後要修圖時才發現，開繪圖程式再開檔案加字就花了一點時間，又要把相片壓縮、打字、加浮水印 … ，這又要花了不少時間，加上只是為了縮小圖片加字而去開啟繪圖程式，又是要一張一張相片的做太麻煩了，所以就想到用 Canvas ，直接用 &lt;input type=&quot;file&quot; &gt; 載入圖後，再用按鍵另存成新的圖檔，就可以快速完成，所以接下來就開始實做。 建立畫板在 HTML 中建立 Cancas 1&lt;canvas id=\"cvs\"&gt;&lt;/canvas&gt; 和載入圖片的按鍵 1&lt;input type=\"file\" id=\"loadPic\"&gt; 要從 input 取得圖片 ，取值方式可參考 MDN 在網頁應用程式中使用本地檔案 要先判斷有沒有資料才向下執行 12345function readURL(input) &#123; if (input.files &amp;&amp; input.files[0]) &#123; // 執行內容 &#125;&#125; 當 input.files 有值時，建立 new FileReader() 讀取資料。 再來就等 FileReader 確定有接收到資料後就可以執行載入圖片了。 12345var reader = new FileReader();reader.onload = function (e) &#123; // 圖片載入&#125;;reader.readAsDataURL(input.files[0]); 再來就設定載入後的圖片寬高，這裡我設定的是固定高度是 300 px ，寬是等比例縮放。 123456789101112131415161718var img = new Image();img.onload = function () &#123; canvas.height = 450; canvas.width = (canvas.height / img.height) * img.width; // 載入圖片 ctx.drawImage(img, 0, 0, canvas.width, canvas.height); ctx.font = \"60px monospace\"; // 字級 字體 ctx.textBaseline = \"top\"; // 文字對齊的基準線 var textW = ctx.measureText(\"浮水印\").width; // 取得文字的長度 ctx.fillText( \"浮水印\", (canvas.width - textW) / 2, (canvas.height - 60) / 2 ); // 置中&#125;;img.src = e.target.result; 另存新檔的話就直接使用 a 標籤完成 1&lt;a href=\"#\" download=\"另存新檔.jpg\" onclick=\"this.href=canvas.toDataURL();\"&gt;下載圖片&lt;/a&gt; 這樣就完成一個簡單又快速完成有加字和轉存圖片的工具 以下為完整的轉存圖片 HTML 元素 123&lt;a href=\"#\" download=\"販售品.jpg\" onclick=\"this.href=canvas.toDataURL();\" &gt;下載圖片&lt;/a&gt;&lt;input type=\"file\" onchange=\"readURL(this)\" id=\"loadPic\"&gt;&lt;canvas id=\"cvs\"&gt;&lt;/canvas&gt; 用 img 標籤檢查 input 是不是有正確取出資料 12345678910111213141516&lt;img src=\"\" id=\"imgload\" alt=\"\"&gt;&lt;script&gt; function readURL(input) &#123; if (input.files &amp;&amp; input.files[0]) &#123; var reader = new FileReader(); reader.onload = function(e) &#123; $('#blah').attr('src', e.target.result); &#125; reader.readAsDataURL(input.files[0]); &#125; &#125; $(\"#imgInp\").change(function() &#123; readURL(this); &#125;);&lt;/script&gt; 參考資料 Image input to canvas and color picker Preview an image before it is uploaded","categories":[],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"JavaScript 迴圈","slug":"20200726-js-loop","date":"2020-07-26T15:52:01.000Z","updated":"2020-08-02T15:57:26.915Z","comments":true,"path":"2020/07/26/20200726-js-loop/","link":"","permalink":"https://orandigo.github.io/2020/07/26/20200726-js-loop/","excerpt":"簡介因為需要使用重複執行，所以整理一下。","text":"簡介因為需要使用重複執行，所以整理一下。 for 迴圈（for Loop）當 for 裡面的變數 i 和條件判斷是 ture 時執行內容後再回到前面的 for 迴圈，直到判斷是 false 時才會停止。 寫法 123for ( var i = 0; i &lt; 10; i++ ) &#123; console.log(i)&#125; var i = 0 是設定初始值 i &lt; 10 條件判斷決定迴圈何時停止，當 ture 時執行，false 時停止 i++ 當內容執行完後執行 ( 算術運算子 ) 在寫迴圈的時候，要注意避免產生無限迴圈 使用 forEach 簡化當條件判斷的值是陣列長度時，原本寫法為 123for (var i = 0; i &lt; array.length; i++) &#123; console.log(Ary[i]);&#125; 這就會把陣列 array 的值一個一個取出 要簡化寫法就可以使用 forEach 讓陣列依序執行 123array.forEach(function (value) &#123; console.log(value);&#125;); 而要注意不能使用 break 中斷迴圈，或 return 跳到迴圈外。 for..in 迴圈這會把 myArray 當作 物件 依序執行 123for (var index in myArray) &#123; console.log(myArray[index]);&#125; 因為不是作為陣列 Array 而是物件 Object 執行，所以有幾點要注意： index 不會是 number (0, 1, 2) 而是 string (‘0’, ‘1’, ‘2’) 會找到自定義的屬性名稱，像是 myArray.name 屬性，就會得到一個 index 叫做 ‘name’ while 迴圈當條件是 ture 的時候執行，直到條件是 false 才會停止 常用在顯示搜尋結果或是目錄清單等。 1234567var i = 0;while( i &lt; 10 ) &#123; document.write(i); i++;&#125;// 0123456789 do…while 迴圈12345var i = 0;do &#123; document.write(i); i++;&#125;while( i &lt; 10 ); 與 while 迴圈差別在 do…while 會先執行內容再判斷，而 while 是先判斷再執行內容。 ES6 的 for…of 可以搭配 break, continue, return 123for (variable of iterable) &#123; statement&#125; variable 指的是值不是索引，直接看下面的例子會比較清楚 1234567891011121314151617181920212223242526272829// 使用在陣列時const iterable = [10, 20, 30];for (const value of iterable) &#123; console.log(value);&#125;// 10// 20// 30// 使用在字串時const iterable = 'boo';for (const value of iterable) &#123; console.log(value);&#125;// \"b\"// \"o\"// \"o\"// 在陣列內的陣列內取值const iterable = new Map([['a', 1], ['b', 2], ['c', 3]]);for (const [key, value] of iterable) &#123; console.log(value);&#125;// 1// 2// 3","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"函式","slug":"JavaScript/函式","permalink":"https://orandigo.github.io/categories/JavaScript/%E5%87%BD%E5%BC%8F/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Sass","slug":"20200712-sass","date":"2020-07-12T14:56:31.000Z","updated":"2020-07-21T15:10:28.394Z","comments":true,"path":"2020/07/12/20200712-sass/","link":"","permalink":"https://orandigo.github.io/2020/07/12/20200712-sass/","excerpt":"簡介在編寫 CSS 時常會為了一個效果而寫一大長串的樣式、編排，又或者是使用了許多幾乎有著相同文字效果的元素，讓整個 CSS 檔案很龐大之外，在之後的修改維護也十分的不方便。","text":"簡介在編寫 CSS 時常會為了一個效果而寫一大長串的樣式、編排，又或者是使用了許多幾乎有著相同文字效果的元素，讓整個 CSS 檔案很龐大之外，在之後的修改維護也十分的不方便。 Sass 是什麼呢? 是一種 Pre-Processor 預處理器的語言 編寫並透過預處理器編譯，產生可以被瀏覽器讀取的純 CSS 語言 多數 CSS 預處理器都會添加純 CSS 所沒有的功能，例如：mixin、巢狀選擇器、繼承選擇器等 讓 CSS 結構在編寫時可以更快速專注、可讀性更高、日後的維護修改更方便 副檔名分 .scss 和 .sass Sass 和 SCSS 最大的不同是 SCSS 還保留著大括號 { } 和分號 ; ，Sass 則不需要 計算這功能在 Sass 和 SCSS 使用，方便也大大的減少計算的時間。 計算單位可以用 px、pt、in、cm、mm 互相加減，但不能用在乘、除計算 而 em, rem 不是固定的單位所以不能使用 加、減可以和不同的單位計算 12$width: 10cm + 60px$height: 160px - 60pt 乘、除和 加、減 不同，不能是兩個都帶有單位的值作計算，必需有一個是數字 12$height: 50px * 20px$height: 50px / 25px 上方的兩個例子都是不行的 因為乘法會得到 1000px*px isn&#39;t a valid CSS value. 單位變成了 px*px 不是能用的值 除法是因為 px/px 結果等於是沒單位的數字 所以要改為用 1$height: 50px * 2 才能正確得到 100px 另外因為除法的結果是正確的數字，以是沒有單位 所以可以在 小括號內的先除 在外面加上 乘或除法 得到的值就會是沒問題可以使用的 1$height: 50px * (50px/25px) 可以用在 乘、除 的單位就是包括 em, rem 都可以使用 12$width: 100px$height: $width * 2 顏色計算用 HEX 的計算 1color: #290a8f-#012345 Variable 變數定義變數的方式是使用 $ 加變數名稱，而且不能有空格。 預先定義會用到的主要樣式 12$font-size: 18px$title-font: \"Arial\" 顏色 1$text-color: #f00 以及文字計算 1$text-l: $text-m * 1.5 顏色的處理 12color: $text-colorbox-shadow: 5px 5px 10px darken($text-color, 20%) 都是十分的方便 @mixin 和 @include這就像在使用 function bluebox () { } 的作法 打包用 @mixin 把全部的樣式都放進來 123@mixin bluebox color: #FFF background-color: blue 要使用時是用 @include 把包在裡面的置入 12.box @include bluebox 而且還可以加上變數配合計算產生使用 123456@mixin color($color, $size) color: $color font-size: $size *1.5.box @include color(#f00, 16px) @content這和前一個的使用方式類似，@mixin 是置入的方式，而使用 @content 則是在指定的位置加上新的屬性和值並置入 12345678@mixin color($color, $size) color: $color font-size: $size *1.5 @content.box @include color(#f00, 16px) border: 1px solid #333 若只是用一樣的使用方式只會得到相同的結果，看不出差異 如果在 @mixin 內再加一層 1234567891011121314@mixin link-active &amp;:active @content@mixin link-hover &amp;:hover @content.box color: #000 @include link-active color: #f00 @include link-hover color: #0f0 轉成 CSS 時 123456789.box &#123; color: #000;&#125;.box:active &#123; color: #f00;&#125;.box:hover &#123; color: #0f0;&#125; 就會發現會先把新的值放到 @mixin 內，才再把 @mixin 的內容放到 @include 的位置 @import最後還可以參考 Bootstrap 的方式，為了方便整理把各類的樣式、變數拆分成多個 Sass / CSS 檔案後，再用 @import 加檔案名和副檔名 匯入，而副檔名也可省略。 123@import \"functions\";@import \"variables\";@import \"CSSreset\";","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"功能","slug":"CSS/功能","permalink":"https://orandigo.github.io/categories/CSS/%E5%8A%9F%E8%83%BD/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"轉換成列印格式","slug":"20200705-css-print","date":"2020-07-05T15:24:26.000Z","updated":"2020-07-05T17:27:43.915Z","comments":true,"path":"2020/07/05/20200705-css-print/","link":"","permalink":"https://orandigo.github.io/2020/07/05/20200705-css-print/","excerpt":"用插件 Paper CSS 轉換","text":"用插件 Paper CSS 轉換 Paper CSS for happy printing 使用方式有 直接到 Github 下載 CDN 1&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/paper-css/0.3.0/paper.css\"&gt; 用 NPM 下載 1npm install paper-css 使用方式 在 CSS 設定列印尺寸 123@page &#123; size: A4&#125; 在要轉換成可列印的 HTML 元素加上 12345678910&lt;body class=\"A4\"&gt; &lt;!-- 當外層設定尺寸後，內容元素就會成為工作表的格式 --&gt; &lt;section class=\"sheet padding-10mm\"&gt; &lt;!-- 工作表的內容推擠 padding-**mm\" 只可設定 10、15、20、25 --&gt; 內容一樣可用 HTML 作切版設計 &lt;/section&gt;&lt;/body&gt; 可用列印尺寸有 A3 、 A4、 A5、 名信片大小，也可到 Example 下載看看 轉成 PDF需要先載入 Electron-pdf 插件 1npm install --global electron-pdf 再執行轉換 1electron-pdf 原網頁檔案檔名.html 轉換後檔名.pdf 可用的功能可以到 All Available Options 看看 [ 題外話 ] 設定為不可列印設定方式就是在 @media print 設定當列印時要把 body 的標籤內容 不呈現 1@media print &#123; body &#123; display:none &#125; &#125; 同理列印時只隱藏某些標籤的話，就只要設定 classname 的屬性為 display:none","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"插件","slug":"CSS/插件","permalink":"https://orandigo.github.io/categories/CSS/%E6%8F%92%E4%BB%B6/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Input 日期、時間 標籤","slug":"20200628-input-date","date":"2020-06-28T14:51:13.000Z","updated":"2020-06-28T16:20:19.858Z","comments":true,"path":"2020/06/28/20200628-input-date/","link":"","permalink":"https://orandigo.github.io/2020/06/28/20200628-input-date/","excerpt":"簡介Input 有許多常用的屬性，例 type=&quot;button&quot; 、type=&quot;number&quot;、type=&quot;password&quot;、type=&quot;checkbox&quot;、type=&quot;date&quot; … 等，關於日期和時間類除了基本的 type=&quot;date&quot; 外還有另外 4 個十分方便的屬性，以下就要來說明。","text":"簡介Input 有許多常用的屬性，例 type=&quot;button&quot; 、type=&quot;number&quot;、type=&quot;password&quot;、type=&quot;checkbox&quot;、type=&quot;date&quot; … 等，關於日期和時間類除了基本的 type=&quot;date&quot; 外還有另外 4 個十分方便的屬性，以下就要來說明。 month 年月1&lt;input type=\"month\"&gt; 只會有年份和月份可以選取，又可以 設定預設值 value 和 限制可選範圍 [ 最早從min 、最後至 max ] 1234&lt;input type= \"month\" value= \"2020-05\" min= \"2020-03\" max= \"2020-10\"&gt; date 年月日 123&lt;input type=\"date\" value=\"2020-06-25\" min=\"2020-01-01\" max=\"2020-12-31\"&gt; 預設日期 value 限制可選日期起始日 min 限制可選日期結束日 max time 時間 1234&lt;input type=\"time\" value=\"13:30\" min=\"09:00\" max=\"18:00\"&gt; 關於時間的選擇還可以使用 step=&quot;1&quot; 增加秒數欄位，但 目前這功能在有些瀏覽器會看不到的情況 ，使用時要注意。 datetime-local 本地年月日 + 時間1234&lt;input type=\"datetime-local\" value=\"2018-06-12T19:30\" min=\"2018-06-07T00:00\" max=\"2018-06-14T00:00\"&gt; 日期後要加上 T 就可再接上時間設定 時間可加上 step=&quot;1&quot; 呈現秒數欄位 week 呈現年份 + 週數123&lt;input type=\"week\" min=\"2020-W26\" max=\"2020-W30\"&gt; 可使用 step=&quot;1&quot; 代表可選擇每一週，step=&quot;2&quot; 時就會是每月的 2 週才可選","categories":[],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"MATH 數學屬性","slug":"20200621-math","date":"2020-06-21T13:52:07.000Z","updated":"2020-06-21T16:58:54.214Z","comments":true,"path":"2020/06/21/20200621-math/","link":"","permalink":"https://orandigo.github.io/2020/06/21/20200621-math/","excerpt":"簡介 Math 是一個擁有數學常數及數學函數（非函式物件）屬性及方法的內建物件 。所有 Math 的屬性及方法皆為靜態。","text":"簡介 Math 是一個擁有數學常數及數學函數（非函式物件）屬性及方法的內建物件 。所有 Math 的屬性及方法皆為靜態。 https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Math 物件的屬性物件的屬性也稱常數值，在 Javascript 內由精確數字定義出來的，都會得到固定的值。 屬性 說明 值 Math.E 數學常數，是自然對數的底數。又稱歐拉數（Euler’s number）。自然對數是以數學常數 e 為底數的對數函數。 2.718281 Math.LN2 2的自然對數。 0.693 Math.LN10 10的自然對數。 2.302 Math.LOG2E 底數為2的e的對數。 1.443 Math.LOG10E 底數為10的e的對數。 0.4342944819032518 Math.PI 圓周率 3.141592653589793 Math.SQRT1_2 0.5(1/2)的平方根。 0.707 Math.SQRT2 2的平方根。 1.414 物件的方法 三角函數 數字取值 數字計算 判斷正負數值 三角函數利用三角函數取得角度的值 取得角度正值 ( 順時鐘 ) sin() 、 cos() 值會介於 -1 到 1 之間，因為是靜態的方法，所以是固定值。 tan() 值還可使用角度值 取得相反角度值 ( 逆時鐘 ) asin() acos() atan() atan2() 數字取值的方法123456789101112131415161718192021// 回傳數字的絕對值，負值會轉成正值Math.abs(5.55) //5.55Math.abs(-3.2) //3.25// 取得介於 0 至 1 之間的亂數Math.random()// 四捨五入Math.round(3.14) // 3Math.round(5.49999) // 5Math.round(5.5) // 6// 取得比原數值小的最大整數Math.floor(3.94) // 3Math.floor(5.1) // 5Math.floor(-5.4) // -6// 取得比原數值大的最小整數Math.ceil(3.94) // 4Math.ceil(5.1) // 6Math.ceil(-5.4) // -5 數字計算Math.pow() 次方、平方根 123456789// 次方Math.pow(2, 2) // 2 * 2 = 4Math.pow(2, 3) // 2 * 2 * 2 = 8// 平方根Math.pow(4, 0.5) // 2 （4 的平方根）Math.pow(8, 1/3) // 2 （8 的立方根）Math.pow(2, 0.5) // 1.4142135623730951 （2 的平方根）Math.pow(2, 1/3) // 1.2599210498948732 （2 的立方根） 平方根還有另一個方法 1Math.sqrt(4) // 2 判斷正負值Math.sign() 不論值的大小，只會回傳正負值和 NaN 12345Math.sign(199) // 1Math.sign(-199) // -1Math.sign(0) // 0Math.sign(-0) // -0Math.sign(NaN) // NaN 找出參數最大、最小值1234// 找出最大的值Math.max(199, 399, 59, 699) // 699// 找出最小的值Math.min(199, 399, 59, 699) // 599","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"屬性","slug":"JavaScript/屬性","permalink":"https://orandigo.github.io/categories/JavaScript/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Flexbox 排版","slug":"20200607-flex","date":"2020-06-07T13:52:07.000Z","updated":"2020-07-03T17:20:47.374Z","comments":true,"path":"2020/06/07/20200607-flex/","link":"","permalink":"https://orandigo.github.io/2020/06/07/20200607-flex/","excerpt":"簡介FLEX 的對齊方法就類似是 Google 文件 或 WORD 的文字對齊工具","text":"簡介FLEX 的對齊方法就類似是 Google 文件 或 WORD 的文字對齊工具 CSS Flexible Box Layout Module 在 W3C 有介紹到 Flexbox 就是為了優化設計的 CSS 模型 ( Module ) ，最重要的是 具有靈活佈局的功能 ，這使用在自適應網頁上排版設計就變得更加簡單方便。 而且用 Can I use 查詢幾乎所有的瀏覽器都有支援 Flexbox 的架構要使用 Flexbox 模型佈局，就必須在全部元素外加上一個 外層容器 包著並設定，而全部被包著的元素才會是可排版佈局的 內層元件 外層容器在 HTML 建立一個外層範圍 container 1&lt;div class=\"container\"&gt;&lt;/div&gt; 並在 CSS 設定範圍內具有 Flexbox 佈局功能 123.container &#123; display: flex&#125; 軸線 在模型內的軸線稱為 主軸 ( main axis ) 和 交錯軸 ( cross axis ) 。 軸線不能稱為 水平軸 和 垂直軸，因為主軸可以是左右水平方向也可以是上下垂直方向。 屬性 外層容器的屬性為全部內層相同設定 內層元件在 container 放入 item 作為 內層元件 ，然後才把文字、圖片相關內容的元素放到 item 內。 1234567891011&lt;div class=\"container\"&gt; &lt;div class=\"item\"&gt;1&lt;/div&gt; &lt;div class=\"item\"&gt;2&lt;/div&gt; &lt;div class=\"item\"&gt;3&lt;/div&gt; &lt;div class=\"item\"&gt;4&lt;/div&gt; &lt;div class=\"item\"&gt;5&lt;/div&gt; &lt;div class=\"item\"&gt;6&lt;/div&gt; &lt;div class=\"item\"&gt;7&lt;/div&gt; &lt;div class=\"item\"&gt;8&lt;/div&gt; &lt;div class=\"item\"&gt;9&lt;/div&gt;&lt;/div&gt; 內層元件 必須被 外層容器 包著才會作用 作為可靈活排版的元件 避免排版被內容的設定影響，文字、圖片相關內容的元素要放到元件內 Flexbox 的屬性外層容器 display 設定值分兩種 flex 為區塊元素 inline-flex 為行內元素 1234.container &#123; display: flex display: inline-flex&#125; 行內元素 inline-flex 會因為 內容元件 的寬高而改變外層大小 在沒設定寬度時，2 者差別如下圖 內層元件 排列方式 flex-direction 元件排列順序 flex-wrap 換行順序 元件對齊 排列方向 flex-direction 排列方式分兩種 水平 和 垂直 水平排列又分 靠左 (向右依序排列)、靠右對齊 (向左依序排列) 水平排列1234567.container &#123; display:flex; /* 靠左 */ flex-direction: row; /* 靠右 */ flex-direction: row-reverse;&#125; 垂直排列轉成直式的 由上至下、由下至上 1234567.container &#123; display:flex; /* 由上至下 */ flex-direction: column; /* 由下至上 */ flex-direction: column-reverse;&#125; 換行順序預設在內容太多時，預設會自動縮小全部內容的寬度，讓全部內容都能被看到，但這樣就會改變原來的樣子 所以就可使用換行 flex-wrap: wrap ，每行下方的行間都會平均等高，相反的 flex-wrap: wrap-reverse; 平均等高的行間會在每行上方。 1234567891011.container &#123; display:flex; /* 貼齊外層上邊排列 內容至超過外層寬後換行 方向由上至下 */ flex-wrap: wrap; /* 貼齊外層下邊排列 內容至超過外層寬後換行 方向由下至上 */ flex-wrap: wrap-reverse;&#125; 對齊 水平 X 軸對齊 justify-content 垂直 Y 軸對齊 分兩種 當內容只有一行時 align-items 內容有多行時 align-content 水平的左右對齊12345678910111213.container &#123; display:flex; /* 預設靠左 */ justify-content: flex-start; /* 靠右 */ justify-content: flex-end; /* 置中 */ justify-content: center; /* 把內容和內容之間的空間均分到內容的左右 */ justify-content: space-around; /* 把內容最左、最右的貼齊在外層邊上後平均每個內容之間的空間 */ justify-content: space-between; &#125; 垂直的上下對齊上下對齊分 單行的 align-items 、多行的 align-items 屬性對齊方式，值除了多 space-around 、space-between 的不同，其他都是相同的。 單行和多行的上下對齊差別在 單行會有每列的間距、多行不會有每列之間的間距 1234567891011121314151617181920212223242526.container &#123; display:flex; /* 單行 */ /* 預設內容會貼齊外層上邊 */ align-items: stretch; /* 上下置中 */ align-items: center; /* 對齊外層上邊 */ align-items: flex-start; /* 對齊外層下邊 */ align-items: flex-end; /* 多行 */ /* 預設貼齊外層上邊、下方保留每行的平均間距、方向由上至下 */ align-content: stretch; /* 上下置中 */ align-content: center; /* 對齊外層上邊、內容和內容不留間距排列 */ align-content: flex-start; /* 對齊外層下邊、內容和內容不留間距排列 */ align-content: flex-end; /* 內容和內容換行的空間均分到內容的上下 */ align-content: space-around; /* 最上及最下的內容貼齊在外層邊上後平均每列的間距 */ align-content: space-between; &#125; 要注意若是有設定換行是使用 flex-wrap: wrap-reverse 由下至上換行時，上下排列的方向就會是相反的由下至上排列。","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"filter 變色特效","slug":"20200531-filter","date":"2020-05-31T13:35:53.000Z","updated":"2020-08-30T17:40:45.205Z","comments":true,"path":"2020/05/31/20200531-filter/","link":"","permalink":"https://orandigo.github.io/2020/05/31/20200531-filter/","excerpt":"簡介原圖只是要改變顏色不用再進到繪圖軟體修改圖，只要用 filter 的 CSS 屬性就可以，雖然不能作到細節修飾，但對只是要作復古、灰階的黑白圖之類的效果還是很方便。 另外在按鍵也可以使用，只需要設定全部按鍵的 :hover 、:active 、:focus 會改變的亮暗度、飽和度後，在個別按鍵設定顏色就會有一般或按下時不同的顏色，加上設定的是個別按鍵所以顏色不同但都可以有一致性的變化。","text":"簡介原圖只是要改變顏色不用再進到繪圖軟體修改圖，只要用 filter 的 CSS 屬性就可以，雖然不能作到細節修飾，但對只是要作復古、灰階的黑白圖之類的效果還是很方便。 另外在按鍵也可以使用，只需要設定全部按鍵的 :hover 、:active 、:focus 會改變的亮暗度、飽和度後，在個別按鍵設定顏色就會有一般或按下時不同的顏色，加上設定的是個別按鍵所以顏色不同但都可以有一致性的變化。 變色特效可改變的有 色調 - 改變不同的顏色 亮度 - 增減白色的量 飽和度 - 增減顏色的鮮艷度 使用元素 有加上顏色的標籤 &lt;div&gt; 、&lt;span&gt; … 圖片 &lt;img&gt; SVG 圖 使用 filter: url(&quot;filters.svg#filter-id&quot;) 在 filters.svg 加上 filter-id 效果名稱的特效 還可以指定加在元素的前後 加在目前的元素上 filter: blur(5px); 效果加在後面 backdrop-filter: none; 參考文件 Filter Effects 色調旋轉 filter: hue-rotate() 圖片出處: http://koi.tspu.ru/kg/hsb.htm 色調的角度範圍從 0 到 360 度，就像上圖的角度，不論是超過或小於 0 之外的值，都是加減 360 度取得符合範圍內的值。 12345678/* -90 + 360 = 轉 270 度 */filter: hue-rotate(-90deg) /* 不變 */filter: hue-rotate(0deg)/* 轉 90 度 */filter: hue-rotate(90deg)/* 405 - 360 = 轉 45 度 */filter: hue-rotate(405deg) 角度還可以使用 turn 、rad 12345678filter: hue-rotate(0);filter: hue-rotate(90deg);/* 1 turn = 360 度 */filter: hue-rotate(-0.25turn);/* 3.142 rad = 360 度 */filter: hue-rotate(3.142rad); https://codepen.io/designerJordan/pen/qDEjr 負片效果 filter: invert() 設定值介於 0 % ~ 100 % 之間、 50 % 等於純灰色的圖 也可用 0 ~ 1 之間的值 亮度調整 filter: brightness() 設定值可以是百分比或是有小數點，但不可以是負數 百分比 - 預設 100% 0% = 全黑 100% = 正常亮度 100% 以上百分比愈高顏色愈亮白 數字 - 預設 1 0 = 全黑 1 = 正常亮度 數字愈高顏色愈亮白 12filter: brightness(100%);filter: brightness(.5); 飽和度調整 filter: saturate() 設定值可以是百分比或是有小數點，但不可以是負數 預設 1 、 100% 值也可以超過 100% 再提高飽和度 對比度 filter: contrast() 設定值可以是百分比或是有小數點，但不可以是負數 0 = 0% = 全黑 1 = 100% = 不變 / 預設值 值可以超過 1 / 100% 值愈高對比愈強 + 亮白 1filter: contrast(200%) 高斯模糊 filter: blur()設定值預設是 0 ，是指模糊的半徑，值不能是負數 1234filter: blur(radius)filter: blur(0);filter: blur(4px);filter: blur(1.5rem); 陰影效果 filter: drop-shadow() 這個效果不同於塊狀陰影的 box-shadow() 會依據圖片外框加陰影 也沒有 inset 可以使用 彩色轉灰階 filter: grayscale() 設定值 0% ~ 100% 預設 = 0% = 0 無色彩的灰階 = 100% = 1 透明度 filter: opacity() 和 opacity 屬性功能相同但因為是透過 filter 使用所以有些瀏覽器會使用硬件加速讓效能更好 設定值 0 和 0% 是全透明， 1 和 100% 是不透明 轉深褐色、復古效果 filter: sepia() 設定值介於 0% 至 100% 預設 0 、 0% 100% 完全是深褐色 屬性值的串連以上的設定不需要一個一行的寫，可以把 filter: 後的設定值作串連只需要在效果之間加上 一格空白 就行了 12filter: contrast(175%) brightness(30%);filter: drop-shadow(16px 16px 20px red) invert(75%); 參考文件mozilla: filter Hue Rotation And Invert :CSS Filter Propertyhttps://css-magz.blogspot.com/2017/04/hue-rotation-and-invert-css-filter.html","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Animate.css 動畫插件","slug":"20200524-animate-css","date":"2020-05-24T15:00:38.000Z","updated":"2020-05-24T15:15:48.599Z","comments":true,"path":"2020/05/24/20200524-animate-css/","link":"","permalink":"https://orandigo.github.io/2020/05/24/20200524-animate-css/","excerpt":"簡介為網頁增加動畫效果的 CSS 插件，只需要載入 CDN 並在要有動畫效果的區塊加上 Class 名稱就能看到效果了。 效果有彈跳、淡入淡出、滑入滑出、旋轉過場、放大縮小過場 … 等，可以到 Animate.css 內試用看看每個有趣的動畫。 Animate.csshttps://animate.style/","text":"簡介為網頁增加動畫效果的 CSS 插件，只需要載入 CDN 並在要有動畫效果的區塊加上 Class 名稱就能看到效果了。 效果有彈跳、淡入淡出、滑入滑出、旋轉過場、放大縮小過場 … 等，可以到 Animate.css 內試用看看每個有趣的動畫。 Animate.csshttps://animate.style/ 安裝Documentation NPM 1npm install animate.css --save 在 HTML 載入 1&lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.0.0/animate.min.css\" /&gt; 套用效果在要套用動畫的元素 class 內加上 animate__animated 和有前綴 animate__ 的動畫名稱就可以了，以下方為例 1&lt;h1 class=\"animate__animated animate__bounce\"&gt;An animated element&lt;/h1&gt; 這就會執行 bounce 的動畫效果 應用的注意事項 要注意動畫效果有可能會 阻礙到使用者在觀看或使用體驗 所以官方文件也有提供動畫 最佳的做法 和 避免踩到的陷阱 的註解 在網頁中呈現動畫可以提升使用者的體驗，但有幾點必須注意 動畫目的在提示、轉換情境、進入、跳出 … 等讓使用者觀感更佳 避免設定在 &lt;html&gt; 、&lt;body&gt; 的標籤上，因為整個頁面跳動不一定比較好還可能產生奇怪的錯誤，建議是用一個區塊包著動態的物件會比較好 避免使用無止境的動畫 避免修改覆寫 CSS 屬性設定，因為可能會導至動畫效果失效產生奇怪的錯誤。 簡易的修改設定若是要微調動畫 持續時間 、 延遲時間 還可以使用簡化寫法 延遲執行 直接在 class 增加 animate__delay- 加上秒數，預設 1 至 5 秒 1&lt;div class=\"animate__animated animate__bounce animate__delay-2s\"&gt;Example&lt;/div&gt; 控制動畫執行的速度 class 名稱 預設速度時間 animate__animated 1s animate__slow 2s animate__slower 3s animate__fast 800ms animate__faster 500ms 重複執行次數 class 名稱 預設重複次數 animate__repeat-1 1 animate__repeat-2 2 animate__repeat-3 3","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"插件","slug":"CSS/插件","permalink":"https://orandigo.github.io/categories/CSS/%E6%8F%92%E4%BB%B6/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Victor.js 繪製 2D 向量圖","slug":"20200517-victorjs","date":"2020-05-17T14:06:55.000Z","updated":"2020-05-17T16:28:45.298Z","comments":true,"path":"2020/05/17/20200517-victorjs/","link":"","permalink":"https://orandigo.github.io/2020/05/17/20200517-victorjs/","excerpt":"簡介這是繪製 2D 向量圖的運算套件，可以快速計算出要產生的點並提供 canvas 繪製使用。又因為檔案容量小，所以適合和 動態效果 配合應用。","text":"簡介這是繪製 2D 向量圖的運算套件，可以快速計算出要產生的點並提供 canvas 繪製使用。又因為檔案容量小，所以適合和 動態效果 配合應用。 官網http://victorjs.org/ https://jumpoff.io/blog/implementing-boids-in-javascript-canvas 載入方式 bower 123bower install victor --save&lt;script src&#x3D;&quot;.&#x2F;bower_components&#x2F;victor&#x2F;build&#x2F;victor.js&quot;&gt;&lt;&#x2F;script&gt; npm 123npm install victor --savevar Victor &#x3D; require(&#39;victor&#39;); 下載檔案 https://github.com/maxkueng/victor/tree/master/build CDN 12https://cdnjs.cloudflare.com/ajax/libs/victor/1.1.0/victor.jshttps://cdnjs.cloudflare.com/ajax/libs/victor/1.1.0/victor.min.js 建立1var vec = new Victor(42, 1337); 這一行就代表建立一個有 (X, Y) 值的點，建立時不限一個點，也可以用陣列一次建立多個點 說明文件http://victorjs.org/#documentation 功能 \u0016\u001aProperties - 取得X 值、Y 值 http://victorjs.org/#properties Constructors - 創造建立的方法 http://victorjs.org/#constructors Utility - 變更修改原本的屬性、值 http://victorjs.org/#utility Manipulation - 控制方法 http://victorjs.org/#manipilation Products - 呈現方式 http://victorjs.org/#products","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"library","slug":"JavaScript/library","permalink":"https://orandigo.github.io/categories/JavaScript/library/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"CSS 選單","slug":"20200510-css-menu","date":"2020-05-10T14:24:32.000Z","updated":"2020-05-10T15:59:17.953Z","comments":true,"path":"2020/05/10/20200510-css-menu/","link":"","permalink":"https://orandigo.github.io/2020/05/10/20200510-css-menu/","excerpt":"簡介利用 CSS 的 display:none 和 display: block 做出的選單效果","text":"簡介利用 CSS 的 display:none 和 display: block 做出的選單效果 單層選單先用 UL 、 LI 建立選單 1234567&lt;ul&gt; &lt;li&gt;Home&lt;/li&gt; &lt;li&gt;About&lt;/li&gt; &lt;li&gt;Card&lt;/li&gt; &lt;li&gt;Post&lt;/li&gt; &lt;li&gt;News&lt;/li&gt;&lt;/ul&gt; CSS 樣式 1234567891011121314ul li &#123; float: left; width: 20%; height: 40px; line-height: 40px; text-align: center; color: #036; background-color: #08f;&#125;/* 滑鼠滑過變色 */ul li:hover &#123; background-color: #5af;&#125; 就會產生下方的效果 ​​​​​ 產生向下一層的選單在 Card 的 LI 內建立新的 UL 、 LI 123456789&lt;li&gt;Card &lt;ul&gt; &lt;li&gt;Card-1&lt;/li&gt; &lt;li&gt;Card-2&lt;/li&gt; &lt;li&gt;Card-3&lt;/li&gt; &lt;li&gt;Card-4&lt;/li&gt; &lt;li&gt;Card-5&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; CSS 樣式 先 display 隱藏下一層的 UL 選單 123ul li ul li &#123; display: none;&#125; 滑到內部有包著 UL 選單的 LI 時再打開 因為上一層的 UL 設為横式選單 所以當下一層選單要改垂直時需要改為行內元素 12345ul li:hover ul li &#123; display: block; float: none; width: 100%;&#125; 這裡 LI 的寬會沿用上一層的 LI 設定 width: 20% 會再被分割五等份 所以要改成和上一層的 LI 同寬 width: 100% 同樣的在不修改滑鼠滑入效果時就會沿用上一層的設定 就會產生像下圖的效果 向下二層的選單一樣在 LI 內建立新的 UL 、 LI 123456789&lt;li&gt;Card-4 &lt;ul&gt; &lt;li&gt;Card-4-1&lt;/li&gt; &lt;li&gt;Card-4-2&lt;/li&gt; &lt;li&gt;Card-4-3&lt;/li&gt; &lt;li&gt;Card-4-4&lt;/li&gt; &lt;li&gt;Card-4-5&lt;/li&gt; &lt;/ul&gt;&lt;/li&gt; CSS 樣式 因為都是用 UL 的列表一層一層產生 及 LI 都是沿用上層的格式 所以就只需要修改移動的位置就能產生效果了 12345678910111213ul ul ul&#123; display:none&#125;ul ul li:hover ul &#123; display: block;&#125;ul ul li:hover ul li &#123; position: relative; top: -40px; left: 100%;&#125;","categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"實例","slug":"CSS/實例","permalink":"https://orandigo.github.io/categories/CSS/%E5%AF%A6%E4%BE%8B/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"jQuery 表格插件 DataTables","slug":"20200503-jquery-datatable","date":"2020-05-03T12:12:34.000Z","updated":"2020-08-30T15:43:36.413Z","comments":true,"path":"2020/05/03/20200503-jquery-datatable/","link":"","permalink":"https://orandigo.github.io/2020/05/03/20200503-jquery-datatable/","excerpt":"簡介這是用 jQuery 快速建立表格的套件 表格的樣式和功能可以用 HTML 的 table 標籤和 Javascript 做設定 資料不只可以建立在 HTML 也可以用 Ajax 取得 官網：https://datatables.net","text":"簡介這是用 jQuery 快速建立表格的套件 表格的樣式和功能可以用 HTML 的 table 標籤和 Javascript 做設定 資料不只可以建立在 HTML 也可以用 Ajax 取得 官網：https://datatables.net 初始化 按照官網介紹的簡單三步驟 載入 CSS、JS 2 個檔案 123&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.css\"/&gt; &lt;script type=\"text/javascript\" src=\"https://cdn.datatables.net/v/dt/dt-1.10.20/datatables.min.js\"&gt;&lt;/script&gt; 載入基本表格 123$(document).ready( function () &#123; $('#myTable').DataTable();&#125; ); 網頁就會看到表格 HTML 設定 最基本要有 &lt;table id=&quot;myTable&quot;&gt; 的標籤，id 是要用 jQuery 綁定使用 1234567891011121314151617&lt;table id&#x3D;&quot;myTable&quot; class&#x3D;&quot;display&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Title 1&lt;&#x2F;th&gt; &lt;th&gt;Title 2&lt;&#x2F;th&gt; &lt;&#x2F;tr&gt; &lt;&#x2F;thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Row 1 Data 1&lt;&#x2F;td&gt; &lt;td&gt;Row 1 Data 2&lt;&#x2F;td&gt; &lt;&#x2F;tr&gt; ... &lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt; &lt;thead&gt; 標籤作為表頭列是必要的 一般表頭 123456&lt;thead&gt; &lt;tr&gt; &lt;th&gt;Title 1&lt;/th&gt; &lt;th&gt;Title 2&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; 複合式表頭，下方是官網所提供的範例 1234567891011121314&lt;thead&gt; &lt;tr&gt; &lt;th rowspan=\"2\"&gt;Name&lt;/th&gt; &lt;th colspan=\"2\"&gt;HR Information&lt;/th&gt; &lt;th colspan=\"3\"&gt;Contact&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;th&gt;Position&lt;/th&gt; &lt;th&gt;Salary&lt;/th&gt; &lt;th&gt;Office&lt;/th&gt; &lt;th&gt;Extn.&lt;/th&gt; &lt;th&gt;E-mail&lt;/th&gt; &lt;/tr&gt;&lt;/thead&gt; 在 &lt;table id=&quot;myTable&quot;&gt; 的設定 class=&quot;display&quot; 的 class 有 8 種表格樣式，可變換 滑鼠滑入變色 、 間隔行列換色 、 隱藏格線 …等 Default styling options 固定每頁的數量 data-page-length=&quot;25&quot; ，預設會產生分頁，若是不需要就要到 JS 設定 使用data-*屬性 或是使用官網提供的 Theme creator 主題樣式產生器 JS 設定12345$(document).ready(function() &#123; $('#myTable').DataTable( &#123; // 表格的設定放在這 &#125; );&#125; ); 123456789101112131415161718192021222324$('#myTable').DataTable( &#123; // 在初始表格的左上有個可選擇的每頁列數的選單設定 lengthChange: true, // 呈現選單 lengthMenu: [5, 10, 25, 50], // 選單值設定 pageLength: 25, // 不用選單設定也可改用固定每頁列數 searching: true, // 搜索功能 ordering: true, // 開啟排序 // 下列 2 個一起用，就可以設定列出全部資料、可滑動又固定尺寸的表格 paging: false, // 是否建立分頁 scrollY: 400, // 固定可以上下滑動的高度 // [指定的列 , 排序方向] 。 // 預設 [[0, 'asc']] ，asc 升冪排列、desc 降冪排列。 order: [[ 1, 'asc' ], [ 2, 'asc' ]], // 鎖定行 columnDefs: [&#123; targets: [3], // 禁止排序 orderable: false, &#125;]&#125; ); 參考 表格的功能選項查詢 語言設定預設是英文，修改有 2 種方式 第一種 - 直接在 JavaScript 寫入 Language options 作單獨修改 1234567891011$(document).ready(function() &#123; $('#example').DataTable( &#123; \"language\": &#123; \"lengthMenu\": \"顯示 _MENU_ 項結果\", \"zeroRecords\": \"沒有符合的結果\", \"info\": \"顯示第 _START_ 至 _END_ 項結果，共 _TOTAL_ 項\", \"infoEmpty\": \"顯示第 0 至 0 項結果，共 0 項\", \"search\": \"搜尋:\" &#125; &#125;);&#125;); 第兩種 - 先下載 設定語言 檔案再把的檔案載入 1234567$(&#39;#myTable&#39;).DataTable( &#123; ... &quot;language&quot;: &#123; &quot;url&quot;: &quot;dataTables.german.lang&quot; &#125;&#125; 可載入的語言列表","categories":[{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"表格類","slug":"類型/表格類","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/%E8%A1%A8%E6%A0%BC%E9%A1%9E/"},{"name":"jQuery","slug":"jQuery","permalink":"https://orandigo.github.io/categories/jQuery/"},{"name":"library","slug":"jQuery/library","permalink":"https://orandigo.github.io/categories/jQuery/library/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"用 Line Notify 通知當天活動","slug":"20200426-gascalendar","date":"2020-04-26T06:12:34.000Z","updated":"2020-04-26T08:16:25.890Z","comments":true,"path":"2020/04/26/20200426-gascalendar/","link":"","permalink":"https://orandigo.github.io/2020/04/26/20200426-gascalendar/","excerpt":"接續前一篇的 用 Line Notify 通知行事曆行程 試用幾天發現 2 個問題： 當有 全天的活動 的時候是不會被傳送，只會傳送 有設定時間的活動 活動說明取得時是有包括 HTML 的標籤，所以 LINE 收到時會出現許多的 HTML 標籤 所以現在要修改一下 傳送當天所有的活動 以及 移除活動的說明的 HTML 標籤 出現一大堆不需要的 HTML 標籤感覺還滿雜亂的","text":"接續前一篇的 用 Line Notify 通知行事曆行程 試用幾天發現 2 個問題： 當有 全天的活動 的時候是不會被傳送，只會傳送 有設定時間的活動 活動說明取得時是有包括 HTML 的標籤，所以 LINE 收到時會出現許多的 HTML 標籤 所以現在要修改一下 傳送當天所有的活動 以及 移除活動的說明的 HTML 標籤 出現一大堆不需要的 HTML 標籤感覺還滿雜亂的 取出月曆的全部活動關於 Calendar 文件 有寫到 getEvents(startTime, endTime) 取得全部有設定時間的事件 getEventsForDay(date) 取得指定日期當天的所有事件 date 的日期會乎略時間只保留日期 當中有個範例 1234// Determines how many events are happening today.var today = new Date();var events = CalendarApp.getDefaultCalendar().getEventsForDay(today);Logger.log('Number of events: ' + events.length); 從範例可以得知 要取得當天活動的數量就算參數給完整的日期、時間、時區 getEventsForDay() 也只會抓日期 而得到的就會是 today 當天所取得的全部事件 所以寫法就可以大大縮短成 12345678910const today = new Date(), getCalendar = CalendarApp.getCalendarById(GoogleCalendarID), todayCalendar = getCalendar.getEventsForDay(today);// 依序取得當天的活動事件todayCalendar.forEach(item =&gt; &#123; if(todayCalendar.length &gt; 0) &#123; notifyStr += (item.getTitle() != \"\") ? (\"\\n\\n\" + '主題: ' + item.getTitle() + \"\\n\") : (\"\\n\"); notifyStr += (item.getDescription() != \"\") ? ('內容:\\n' + stripHTML(item.getDescription())) : \"\"; &#125;&#125;) \u0013成功取得需要收到的訊息 移除 HTML 標籤因為取出來的說明內容是包括了 HTML 標籤的字串 所以用 正則表示式 篩選出標籤的格式 關於正則表示式 MDN 參考文章 裡說到，這是被用來匹配字串中字元組合的模式。 在 JavaScript 中，正則表示式也是物件 可被運用在 RegExp、exec、test 方法中，以及 String 的 match 、 replace 、 search 、 split 等方法中。 這裡會用到的是 replace() ，這個方法會把原本的字串紿過比對篩選後傳回一個新的字串。 說明文件 文件裡有個的範例就很適合 123var str = 'Twas the night before Xmas...';var newstr = str.replace(/xmas/i, 'Christmas');console.log(newstr); 結果會回傳 Twas the night before Christmas... 字串 過程就是 replace() 會把 str 字串內有 xmas 字串用 /i 忽略大小寫 的方式比對 要修改 HTML 的話就要把比對方式改為 /g 全域並多次比對。 為什麼是多次比對呢？ 再用上方的範例來試試看有不同大小字的字串時 出現第 1 個字串在比對成功後就不會再繼續了 1234var str = 'Xmas &amp; xmas &amp; xmas...';var newstr = str.replace(/xmas/i, 'Christmas');console.log(newstr);// Christmas &amp; xmas &amp; xmas... 當改成 /g 時 123var newstr = str.replace(/xmas/g, 'Christmas');console.log(newstr);// Xmas &amp; Christmas &amp; Christmas... 會出現第 1個字串沒改變是因為少加了 忽略大小寫 123var newstr = str.replace(/xmas/gi, 'Christmas');console.log(newstr);// Christmas &amp; Christmas &amp; Christmas... 加上後就會修改每個不論大小寫的 xmas 成 Christmas 回到一開始的活動說明字串 我只需要把 &lt; 、 &gt; 以及裡面所有字元 . 和空格 \\s 全部 *?清空就可以了 然後再用 /g 一一刪除 1234function stripHTML(str) &#123; let reTag = /&lt;(?:.|\\s)*?&gt;/g; return str.replace(reTag,\"\");&#125; 程式碼1234567891011121314151617181920212223242526const LineNotifyToken &#x3D; &#39;abcde...&#39;, GoogleCalendarID &#x3D; &#39;ABCED...&#39;, today &#x3D; new Date(), getCalendar &#x3D; CalendarApp.getCalendarById(GoogleCalendarID), todayCalendar &#x3D; getCalendar.getEventsForDay(today);function SendNotify() &#123; let notifyStr &#x3D; &#39;&#39;; todayCalendar.forEach(item &#x3D;&gt; &#123; if(todayCalendar.length &gt; 0) &#123; notifyStr +&#x3D; (item.getTitle() !&#x3D; &quot;&quot;) ? (&quot;\\n\\n&quot; + &#39;主題: &#39; + item.getTitle() + &quot;\\n&quot;) : (&quot;\\n&quot;); notifyStr +&#x3D; (item.getDescription() !&#x3D; &quot;&quot;) ? (&#39;內容:\\n&#39; + stripHTML(item.getDescription())) : &quot;&quot;; &#125; &#125;) function stripHTML(str) &#123; let reTag &#x3D; &#x2F;&lt;(?:.|\\s)*?&gt;&#x2F;g; return str.replace(reTag,&quot;&quot;); &#125; UrlFetchApp.fetch(&quot;https:&#x2F;&#x2F;notify-api.line.me&#x2F;api&#x2F;notify&quot;, &#123; &quot;method&quot; : &quot;post&quot;, &quot;payload&quot; : &#123;&quot;message&quot; : notifyStr&#125;, &quot;headers&quot; : &#123;&quot;Authorization&quot; : &quot;Bearer &quot; + LineNotifyToken&#125; &#125;);&#125;","categories":[{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"Line Notify","slug":"類型/Line-Notify","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/Line-Notify/"},{"name":"GAS","slug":"類型/GAS","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/GAS/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"v-bind 動態屬性","slug":"20200419-vue","date":"2020-04-19T14:02:12.000Z","updated":"2020-04-19T15:55:06.835Z","comments":true,"path":"2020/04/19/20200419-vue/","link":"","permalink":"https://orandigo.github.io/2020/04/19/20200419-vue/","excerpt":"學習 Vue 的動態屬性綁定 的筆記","text":"學習 Vue 的動態屬性綁定 的筆記 關於 v-bind要讓在 HTML 標籤內的屬性 [例如 ： src 、 class 、 style 等 ] 能和 Vue 程式碼的 data 內容動態呈現，就加上 v-bind 綁定吧。 1&lt;button v-bind:[key]=\"value\"&gt;&lt;/button&gt; 關於 HTML 標籤內的 屬性列表可參考這裡 v-bind 的使用方式插入圖片 &lt;img&gt;123456789101112&lt;div id=\"app\"&gt; &lt;img v-bind:src=\"imgSrc\" alt=\"\"&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: '#app', data: &#123; imgSrc: 'img.jpg' &#125;&#125;)&lt;/script&gt; 把 字串和 字串 接成一個1&lt;img v-bind:src=\"'/path/to/images/' + fileName\"&gt; 綁定 Class 名稱123456789101112&lt;div id=\"app\"&gt; &lt;div v-bind:class=\"className\"&gt;&lt;/div&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: '#app', data: &#123; className: 'item' &#125;&#125;)&lt;/script&gt; 綁定 Style 的屬性和值 要注意使用 CSS 遇到有 - 的屬性時要加上單引號 &#39; 或是改成 駝峰的寫法 ，不然會出錯。 1234567891011121314&lt;div id=\"app\"&gt; &lt;span v-bind:style=\"&#123;'background-color':BGcolor, color: textColor, fontSize: size + 'px'&#125;\"&gt;Hello World&lt;/span&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: '#app', data: &#123; textColor: 'red', BGcolor: 'gray', size: 56 &#125;&#125;)&lt;/script&gt; 合併成物件1234567891011121314151617181920212223&lt;div id=\"app\"&gt; &lt;span v-bind:style=\"&#123; 'background-color':BGcolor, color: textColor, fontSize: size + 'px' &#125;\"&gt;Hello World&lt;/span&gt; &lt;img v-bind=\"&#123; src: '/path/to/images/' + imgSrc, class: className, alt: altText&#125;\"&gt;&lt;/div&gt;&lt;script&gt;var app = new Vue(&#123; el: '#app', data: &#123; imgSrc: 'img.jpg', className: 'item', altText: '這是一張圖片', textColor: 'red', BGcolor: 'gray', size: 56 &#125;&#125;)&lt;/script&gt; 刪除 v-bind: 縮寫成 : 吧v-bind: 提供了縮寫 : ，讓原本一長串回到像是在寫 HTML 但只有加上冒號的 v-bind: 適用， v-bind 是不能縮寫成 : 的 123456789101112&lt;!-- 寫法 --&gt;&lt;button :[key]=\"value\"&gt;&lt;/button&gt;&lt;!-- 使用在 img --&gt;&lt;img v-bind:src=\"imgSrc\" alt=\"\"&gt;&lt;!-- 縮寫 --&gt;&lt;img :src=\"imageSrc\" alt=\"\"&gt;&lt;!-- 使用多個時 --&gt;&lt;img v-bind:src=\"imgSrc\" v-bind:class=\"className\" v-bind:style=\"&#123;width: '350px'&#125;\" alt=\"\"&gt;&lt;!-- 縮寫 --&gt;&lt;img :src=\"imgSrc\" :class=\"className\" :style=\"&#123;width: '350px'&#125;\" alt=\"\"&gt; 參考文件指令 v-bind","categories":[{"name":"Vue","slug":"Vue","permalink":"https://orandigo.github.io/categories/Vue/"},{"name":"筆記","slug":"Vue/筆記","permalink":"https://orandigo.github.io/categories/Vue/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"用 Line Notify 通知行事曆行程","slug":"20200411-line-notify","date":"2020-04-11T14:57:28.000Z","updated":"2020-04-26T06:21:47.751Z","comments":true,"path":"2020/04/11/20200411-line-notify/","link":"","permalink":"https://orandigo.github.io/2020/04/11/20200411-line-notify/","excerpt":"正好看到有 Line Notify 這方便的工具，若是能用 Line 通知當天的行程或是提前 1 小時前通知，對我常健忘的人來說真的是幫大忙了，所以現在就來 DIY 一下","text":"正好看到有 Line Notify 這方便的工具，若是能用 Line 通知當天的行程或是提前 1 小時前通知，對我常健忘的人來說真的是幫大忙了，所以現在就來 DIY 一下 工具 Google Calendar 行事曆 Google Apps Script 工具 LINE Notify 流程 加 Line Notify 為好友 https://notify-bot.line.me/zh_TW/ 搜尋 Google Apps Scripts 並安裝 到 雲端硬碟 建立 Google Apps Script 檔案 在檔案內設定左上角的 專案名稱 設定時區為台北 ： 在 檔案 &gt; 專案屬性 寫好程式碼後，執行時會需要 核對權限 &gt; 選擇使用的帳戶 和確認是否使用按 進階 &gt; 前往「 自訂專案名稱 」(不安全) 了解允許存取的風險按 允許 就會收到 Line 通知了 Google Apps Script 程式碼12const NotifyToken = 'abcdefg...'; // Line Notify 權杖const CalendarID = \"ABCDEFG...@gmail.com\"; // 月曆 ID 自已的 google 月曆 ID = google 信箱 他人建立的 google 公開月曆 ID 是 亂數@group.calendar.google.com Line Notify 權杖 到 LINE Notify 右上 登入 登入帳號 &gt; 個人頁面 滑到最下面點擊 發行存取權杖（開發人員用）的 發行權杖 月曆 ID1const calendar = CalendarApp.getCalendarById(CalendarID); CalendarID 是上方的 google 月曆 ID 又或者是抓取自已的行事曆也是可以直接使用、不使用變數 設定時間用 javascript 通知當天的行程 1234const Now = new Date();const Start = new Date(new Date().setHours(0, 0, 0, 0));const End = new Date(new Date().setHours(23, 59, 59, 999));const calendarData = calendar.getEvents(Start, End); 關於取得月曆事件的相關資訊 提醒次數在上方工具列的 現有專案的起動程序 設定在每天固定時間提醒 另外重複提醒的方式還有 recurrence-rule addDailyExclusion() 排定每天執行的事件 addDailyRule() 排定每日重複次數 排定規則可以用串連的方式連接多個函式 1recurrence.addDailyRule().times(3).interval(2).addWeeklyExclusion().times(2); 通知內容可以用 google apps script 的函式 1234getTitle() // 活動標題getStartTime() // 開始時間getEndTime() // 結束時間getEvents() // 取得時間內發生的所有事件 calendarData 得到當日的所有行程後依序取得內容 1234567891011function Notify() &#123; var Contents = ''; calendarData.forEach(item =&gt;&#123; // 取得時間內的所有事件並依序執行 if (Now &lt;= item.getStartTime()) &#123; NotifyContents += (item.getTitle() != \"\") ? (\"\\n\\n\" + item.getTitle() + \"\\n\") : (\"\\n\\n空標題\\n\"); NotifyContents += (item.getDescription() != \"\") ? item.getDescription() : \"\"; &#125; &#125; ) // Line Notify 傳送訊息&#125; Line Notify 傳送訊息12345UrlFetchApp.fetch(\"https://notify-api.line.me/api/notify\", &#123; \"method\" : \"post\", \"payload\" : &#123;\"message\" : NotifyContents&#125;, \"headers\" : &#123;\"Authorization\" : \"Bearer \" + LineNotifyToken&#125;&#125;); 要傳送通知的屬性都是使用物件包著，只需要 3 個屬性和值再加上網址就可以傳出通知了 完整程式碼123456789101112131415161718192021222324const NotifyToken = 'abcdefg...'; // Line Notify 權杖const CalendarID = \"ABCDEFG...@gmail.com\"; // 月曆 IDconst calendar = CalendarApp.getCalendarById(CalendarID);const Now = new Date();const Start = new Date(new Date().setHours(0, 0, 0, 0));const End = new Date(new Date().setHours(23, 59, 59, 999));const calendarData = calendar.getEvents(Start, End);function Notify() &#123; var Contents = ''; calendarData.forEach(item =&gt;&#123; if (Now &lt;= item.getStartTime()) &#123; NotifyContents += (item.getTitle() != \"\") ? (\"\\n\\n\" + item.getTitle() + \"\\n\") : (\"\\n\\n空標題\\n\"); NotifyContents += (item.getDescription() != \"\") ? item.getDescription() : \"\"; &#125; &#125; ) UrlFetchApp.fetch(\"https://notify-api.line.me/api/notify\", &#123; \"method\" : \"post\", \"payload\" : &#123;\"message\" : NotifyContents&#125;, \"headers\" : &#123;\"Authorization\" : \"Bearer \" + LineNotifyToken&#125; &#125;);&#125; 參考文件我懶得看行事曆，LINE你可以通知我嗎? 讓Line提醒你google 日曆的活動 LINE Notify API Document Script Services 參考資料","categories":[{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"Line Notify","slug":"類型/Line-Notify","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/Line-Notify/"},{"name":"GAS","slug":"類型/GAS","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/GAS/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Vue 建立應用程式、雙向綁定","slug":"20200405-vue","date":"2020-04-05T15:12:34.000Z","updated":"2020-04-19T14:25:26.873Z","comments":true,"path":"2020/04/05/20200405-vue/","link":"","permalink":"https://orandigo.github.io/2020/04/05/20200405-vue/","excerpt":"學習 Vue 使用資料綁定","text":"學習 Vue 使用資料綁定 CDN 載入1234&lt;!-- 開發版本 --&gt; &lt;script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"&gt;&lt;/script&gt;&lt;!-- 生產版本 --&gt;&lt;script src=”https://cdn.jsdelivr.net/npm/vue\"&gt;&lt;/script&gt; 應用程式建立12&lt;div id=\"app\"&gt;&lt;/div&gt; 123456let app = new Vue(&#123; el: '#app', // 綁定在 HTML 裡 id 是 app 的標籤 data: &#123; text: 'Vue 應用程式' &#125;&#125;) el 綁定建議使用 ID 不限用 Id 也可以用 class ，但只會綁定第一個元素，同 class 名的第二個元素就不會有效果 不可使用巢狀 在已綁定 Vue 的元素之下，不可再綁定第 2 個 Vue 應用程式，第 2 個 Vue 會等同無效 雙向綁定 使用 v-model 在 &lt;input&gt;、&lt;textarea&gt; 及 &lt;select&gt; 元素建立雙向綁定 負責監控使用者輸入資料及更新資料內容 Vue 使用 getter 的方式監控資料內容，在寫入資料並同時在 資料變動 時改變其他地方的 setter 官方說明 不同的元素有不同的使用屬性、事件 text 和 textarea 元素使用 value 屬性和 input 事件 checkbox 和 radio 使用 checked 屬性和 change 事件 select 字串把 value 當作 prop 、 change 事件 表單綁定方法 基本用法 v-model 值綁定 修飾符 基本用法範例 單行字串 12&lt;input v-model=\"message\"&gt;&lt;p&gt;Message is: &#123;&#123; message &#125;&#125;&lt;/p&gt; 多行字串 1234&lt;span&gt;Multiline message is:&lt;/span&gt;&lt;p style=\"white-space: pre-line;\"&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;&lt;br&gt;&lt;textarea v-model=\"message\" placeholder=\"add multiple lines\"&gt;&lt;/textarea&gt; Checkbox 12&lt;input type=\"checkbox\" id=\"checkbox\" v-model=\"checked\"&gt;&lt;label for=\"checkbox\"&gt;&#123;&#123; checked &#125;&#125;&lt;/label&gt; v-model 修飾符：lazyMsg、age、trimMsg 12345678let app = new Vue(&#123; el: '#app', data: &#123; lazyMsg: '', age: '', trimMsg: '' &#125;,&#125;); .lazy 在每次 input 事件後執行 預設表單輸入與資料輸出會是即時的 使用 lazy 時，則會延遲到 change 事件之後，也就是輸入完成離開 input 後才會輸出資料 1&lt;input type&#x3D;&quot;text&quot; v-model.lazy&#x3D;&quot;lazyMsg&quot; &#x2F;&gt; .number 把輸入的 內容轉換成數字型態 1&lt;input type=\"number\" v-model.number=\"age\" /&gt; 會使用 type=&quot;number&quot; 只是限制輸入數字，不會改變字串型態，還需要配合 parseFloat() 才會是數字型態 .trim：為避免用戶誤輸入空白字元，因此，可以透過給v-model添加 trim 修飾符，自動過濾掉用戶所輸入的首尾空白字符。 1&lt;input type&#x3D;&quot;text&quot; v-model.trim&#x3D;&quot;trimMsg&quot; &#x2F;&gt;","categories":[{"name":"Vue","slug":"Vue","permalink":"https://orandigo.github.io/categories/Vue/"},{"name":"筆記","slug":"Vue/筆記","permalink":"https://orandigo.github.io/categories/Vue/%E7%AD%86%E8%A8%98/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"innerText、innerHTML、textContent、outerHTML 的差別","slug":"20200322-innerText-innerHTML-textContent-outerHTML","date":"2020-03-22T07:09:13.000Z","updated":"2020-03-29T15:57:25.305Z","comments":true,"path":"2020/03/22/20200322-innerText-innerHTML-textContent-outerHTML/","link":"","permalink":"https://orandigo.github.io/2020/03/22/20200322-innerText-innerHTML-textContent-outerHTML/","excerpt":"innerText innerHTML 取得在一個節點內的全部 HTML 標籤和文字","text":"innerText innerHTML 取得在一個節點內的全部 HTML 標籤和文字 12let content = document.getElementById('content').innerText ; document.getElementById('content').innerText = 'Hello' ; 參考 MDN 文件中有說明到 Node.innerText 是一個代表節點及其後代之「已渲染」（rendered）文字內容的屬性。 範例一在 HTML 放一個 display: none 的字 1&lt;span&gt;Hello &lt;span style=\"display: none;\"&gt;World&lt;/span&gt;&lt;/span&gt; innerText 只會有 Hello，證明這會取得渲染後的文字內容 textContent 會是 Hello World， 這會取得文字在忽視 HTML 後的文字內容 範例二 &lt;div class=content&gt;&lt;/div&gt; 的內容 123456789&lt;div class=\"content\"&gt; &lt;p&gt; 1&lt;br&gt;2&lt;br&gt;3&lt;span style=\"display: none;\"&gt;.5 &lt;/span&gt;&lt;br&gt;4 5 6 7 8 &lt;/p&gt;&lt;/div&gt; 12let content = document.querySelector('.content')console.log(content.innerText) console 得到的值是並不會出現被隱藏的 .5 1234&quot;1234 5 6 7 8&quot; 所以innerText 取得的文字與換行會和 HTML 渲染後呈現的樣子相像 innerHTML innerText 取得在一個節點內的全部樣式 範例&lt;div class=content&gt;&lt;/div&gt; 的內容 123456789&lt;div class=\"content\"&gt; &lt;p&gt; 1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;4 5 6 7 8 &lt;/p&gt;&lt;/div&gt; 12let content = document.querySelector('.content')console.log(content.innerHTML) 就會取得節點內完整的標籤和文字 123456789&quot;&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;br&gt;45678&lt;&#x2F;p&gt;&quot; 包括原始碼的換行都會保留 textContent textContent 取得在一個節點內的文字並包括換行 參考 MDN 文件說明 Node.textContent 屬性表示了節點或其後代的文字內容。 範例123456789&lt;div class=\"content\"&gt; &lt;!-- 從這裡開始的換行都有包括 --&gt; &lt;p&gt; 1&lt;br&gt;2&lt;br&gt;3&lt;span style=\"display: none;\"&gt;.5 &lt;/span&gt;&lt;br&gt;4 5 6 7 8 &lt;/p&gt;&lt;/div&gt; 12let content = document.querySelector('.content')console.log(content.textContent) console 得到的值是 123456789&quot; &#x2F;&#x2F; div.content 開始的換行 &#x2F;&#x2F; p 的換行123.5 45678&quot; 只會取得呈現在 HTML 原始碼內的換行、空格和文字， &lt;br&gt; 會忽略 所以textContent 取得的文字與換行會和原始碼相像 outerHTML outerHTML 包括在一個節點內的全部 HTML 標籤和文字 另外還有outerText ，因為看起來是跟 innerText 相同就不多作範例。 範例123456789&lt;div class=\"content\"&gt; &lt;p&gt; 1&lt;br&gt;2&lt;br&gt;3&lt;span style=\"display: none;\"&gt;.5 &lt;/span&gt;&lt;br&gt;4 5 6 7 8 &lt;/p&gt;&lt;/div&gt; 12let content = document.querySelector('.content')console.log(content.outerHTML) 123456789&quot;&lt;div class&#x3D;&#39;content&#39;&gt;&lt;p&gt;1&lt;br&gt;2&lt;br&gt;3&lt;span style&#x3D;&#39;display: none;&#39;&gt;.5 &lt;&#x2F;span&gt;&lt;br&gt;45678&lt;&#x2F;p&gt;&lt;&#x2F;div&gt;&quot; 得到的就會是包括節點 一模一樣的完整內容 createTextNode()要注意，在建立新節點後，只有 textContent 是唯一可用方法 123456var text = document.createTextNode('text');console.log(text.innerText); // undefinedconsole.log(text.innerHTML); // undefinedconsole.log(text.textContent); // textconsole.log(text.outerHTML); // undefined 參考文件More on differences between innerText and textContent提供的 範例 小tips: JS DOM innerText和textContent的区别","categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"屬性","slug":"JavaScript/屬性","permalink":"https://orandigo.github.io/categories/JavaScript/%E5%B1%AC%E6%80%A7/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"可以上傳 Hexo 到 master 分支嗎？","slug":"20200315-hexo-github","date":"2020-03-15T14:08:10.000Z","updated":"2020-03-22T10:36:24.641Z","comments":true,"path":"2020/03/15/20200315-hexo-github/","link":"","permalink":"https://orandigo.github.io/2020/03/15/20200315-hexo-github/","excerpt":"前言起因是想說把分支設定成 master 會不會也行，就來上傳試看看","text":"前言起因是想說把分支設定成 master 會不會也行，就來上傳試看看 注：絕對不是想要省下一個分支的意思，只是想試試，試試而已 … 然後就把原本是上傳到 gh-pages 分支的 Hexo 發佈檔案上傳到 master 12345# Deploymentdeploy: type: git repo: https://github.com/xxx/blog.git branch: gh-pages # 分支 結果就是上傳到 master 上的最新檔案是不會顯示的 master 分支這就沒作用嗎？ 大有作用！可以上傳 Hexo 原始版本作為備份使用 因為上傳的檔案都是依賴 Hexo 原始版本編譯成一般的 HTML、CSS、JS 格式 若哪一天沒有 Hexo 原始版本又遠端備份時\u0013就必需重新再設定一次 Hexo 所以要備份 Hexo 原始版本才不會哪一天突然不見就 Q Q 刪掉上傳然後已經上傳在 master 的檔案，現在要來刪掉 下圖是已上傳到 master 的 commits 數 為什麼會產生這麼多！？嗯，不知道，所以現在來清掉不是 Hexo 原始版本的 commit 先到 Git Bash 查 commit 只有在 hexo init 後 commit 一個 $ git reset –hard HEAD~ // 到前一個 commit$ git push origin master –force // 強制推上去 移除 Github 上面的 commit刪除本地存儲庫上的提交。 你可以使用git rebase -i來做到這一點。 例如，如果它是你的最後一次提交，你可以執行git rebase -i HEAD~2並刪除編輯器窗口中的第二行。 然後，使用git push origin branchName --force強制推送到 GitHub 參考 Git Magic Chapter 5: Lessons of History — And Then Some","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"設定","slug":"Hexo/設定","permalink":"https://orandigo.github.io/categories/Hexo/%E8%A8%AD%E5%AE%9A/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Hexo 圖片路徑","slug":"20200314-hexo","date":"2020-03-14T14:58:36.000Z","updated":"2020-03-15T18:22:31.335Z","comments":true,"path":"2020/03/14/20200314-hexo/","link":"","permalink":"https://orandigo.github.io/2020/03/14/20200314-hexo/","excerpt":"圖片顯示方式載入圖片的方式有 2 種","text":"圖片顯示方式載入圖片的方式有 2 種 一個是用 絕對路徑 取得圖片在網路上的路徑就可顯示出來 1![圖片的文字描述](https:// 圖片路徑 ) 另一個是相對路徑 首先要在根目錄的 _config.yml 找到 post_asset_folder 開啟功能 12# Writingpost_asset_folder: true 在開啟功能之後所有新增的文章，除了會產生一個 markdown 文章，也會建立一個相同名稱的資料夾作為存放圖片用 因為是直接抓資料夾的圖片，所以就不用輸入資料夾名稱 1![圖片的文字描述](圖片.jpg) 在這之前的文章要載入圖片，只需建立同名的資料夾就可以存放圖片使用","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"設定","slug":"Hexo/設定","permalink":"https://orandigo.github.io/categories/Hexo/%E8%A8%AD%E5%AE%9A/"}],"tags":[]},{"title":"Hexo 站內搜尋","slug":"20200313-hexo-search","date":"2020-03-12T18:54:33.000Z","updated":"2020-03-15T18:22:27.389Z","comments":true,"path":"2020/03/13/20200313-hexo-search/","link":"","permalink":"https://orandigo.github.io/2020/03/13/20200313-hexo-search/","excerpt":"搜尋工具套用的 Theme 網頁內有搜尋功能，但只套用 Theme 還沒安裝相關的插件之前，是不能使用的","text":"搜尋工具套用的 Theme 網頁內有搜尋功能，但只套用 Theme 還沒安裝相關的插件之前，是不能使用的 在 _config.yml 找到設定 123search: insight: true swiftype: 使用 NPM 套件 insight : 需要再安裝 hexo-generator-json-content 才能使用 swiftype : 站內搜尋 需要注冊帳號才能使用 Swiftype 搜尋的 NPM 套件 hexo-generator-search 產生 xml 檔案，可用在 atom.xml hexo-generator-json-content 產生 json 檔案 安裝 : 當執行 hexo s 或 hexo g 時會一起自動執行 1npm i -S hexo-generator-json-content 預設會產生的 json 檔\u0013 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647meta: &#123; //-&gt; 基本設定 title: hexo.config.title, subtitle: hexo.config.subtitle, description: hexo.config.description, author: hexo.config.author, url: hexo.config.url&#125;,pages: [&#123; //-&gt; 全部頁面的統一格式 title: page.title, slug: page.slug, date: page.date, updated: page.updated, comments: page.comments, permalink: page.permalink, path: page.path, excerpt: page.excerpt, //-&gt; only text ;) keywords: null, //-&gt; it needs settings text: page.content, //-&gt; only text minified ;) raw: page.raw, //-&gt; original MD content content: page.content, //-&gt; final HTML content author: page.author&#125;],posts: [&#123; //-&gt; 全部發佈文章的統一格式 title: post.title, slug: post.slug, date: post.date, updated: post.updated, comments: post.comments, permalink: post.permalink, path: post.path, excerpt: post.excerpt, //-&gt; only text ;) keywords: null, //-&gt; it needs settings text: post.content, //-&gt; only text minified ;) raw: post.raw, //-&gt; original MD content content: post.content, //-&gt; final HTML content author: post.author, categories: [&#123; //-&gt; 分類 name: category.name, slug: category.slug, permalink: category.permalink &#125;], tags: [&#123; //-&gt; 標籤 name: tag.name, slug: tag.slug, permalink: tag.permalink &#125;]&#125;] 預設產生的資料多但不一定會用到，可以只選擇需要搜尋的資料就好 到 _config.yml 加入下面的設定 1234567891011121314151617181920212223242526272829303132333435363738jsonContent: meta: true drafts: false # 是否搜尋草稿 file: content.json # 預設檔名，也可自訂。 keywords: undefined dateFormat: undefined # DD/MM/YYYY pages: title: false slug: false date: false updated: false comments: false path: false link: false permalink: false excerpt: false keywords: false text: false raw: false content: false author: false posts: title: true # 標題 slug: false date: false # 日期 updated: false comments: false path: false # 路徑 link: false permalink: false excerpt: false keywords: true text: true # 內文 raw: false content: false author: false categories: false tags: false 選擇忽略123456789101112# exemplejsonContent: ignore: # 不希望被搜尋的部分 paths: - path # 在這路徑下的全部 - url - category # 整個分類 - specific.file # 特定檔案 - .ext # 副檔名相同的全部 tags: # 標籤關鍵字 - tag1 - tag2 可參考文件 https://github.com/alexbruno/hexo-generator-json-content#skip-indexing","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"工具","slug":"Hexo/工具","permalink":"https://orandigo.github.io/categories/Hexo/%E5%B7%A5%E5%85%B7/"}],"tags":[]},{"title":"Hexo 主題設定","slug":"20200308-hexo","date":"2020-03-07T17:25:04.000Z","updated":"2020-03-15T14:18:00.165Z","comments":true,"path":"2020/03/08/20200308-hexo/","link":"","permalink":"https://orandigo.github.io/2020/03/08/20200308-hexo/","excerpt":"資料夾架構跟 Hexo 要建立文章相關的資料夾 public 資料夾 - 生成靜態網站 scaffolds 資料夾 - 樣版 source / _posts 資料夾 - 文章內容都放在這裡","text":"資料夾架構跟 Hexo 要建立文章相關的資料夾 public 資料夾 - 生成靜態網站 scaffolds 資料夾 - 樣版 source / _posts 資料夾 - 文章內容都放在這裡 12345678910111213141516171819├── .deploy_git├── .git├── node_modules├── public # hexo g 生成靜態網站├── scaffolds # 指令產生的草稿、頁面、文章都會依照資料夾內的文件建立| ├── draft.md| ├── page.md| └── post.md # 生成文章的樣版├── source| ├── _drafts| └── _posts # 文章資料夾├── themes # theme 版型資料夾| └── landscape # 預設 theme| └── _config.yml # 版型樣式 設定├── .gitignore├── _config.yml # 基本部署 設定├── db.json├── package.json└── package-lock.json 基本部署 設定 版型列表 - https://hexo.io/themes/ 編寫格式為 yaml 內容 “ : “ 後面都必需保留一格半型空格 預設設定 12345678910111213141516171819202122232425262728# Sitetitle: 標題 / 網站名subtitle: 副標題 / 顯示在頁首description: 網站描述 (SEO、告訴搜尋引擎這個網站的描述)keywords: 關鍵字author: 作者language: 網站語言 (台灣:zh-tw)timezone: 時區# URL# 例如 url 是 'http://UserName.github.io/repository/'# root 就是倉庫名稱 '/repository/'url: http://UserName.github.io/root: /repositorypermalink: 文章網址的永久連結格式(預設使用 YYYY\\MM\\DD\\文章名稱)/permalink_defaults: 永久連結網址的預設值# 格式可參考官方教學# https://hexo.io/zh-tw/docs/permalinks.html# Extensions theme: 套用版型# Deployment 上傳路徑deploy: type: git repository: 部署的儲存庫路徑 / https://github.com/UserName/repository.git branch: gh-pages 分支 message: 部署訊息 避免出錯，在每次的修改設定後，都需要再執行清除先前的資料 1hexo clean 清除後再生成新的資料 12345hexo generate # 產生新的靜態檔案hexo deploy # 發布至遠端# 簡短的指令hexo d -g # 生成 public 並提交 文章佈局 預設佈局 layout post : 文章 page : 頁面 draft : 草稿 鷹架 Scaffold : 可依照文章需要的格式去新增文章，就不用再微調 這會依照 scaffolds 資料夾內建立好的預設檔案新增文章 123hexo new photo \"My Gallery\"# photo 是必須事先建立編排好的格式 .md 檔案# \"My Gallery\" 是新增的文章檔名 新增草稿在 Bash 輸入指令後會建立在 source / _drafts / 資料夾內 1hexo new draft 文章名稱 只要在草稿 _drafts 資料夾內的文章，預設是不會出現在網頁上 草稿轉文章輸入執行 layout 是要移動到的佈局、title 是要移動的檔名 1hexo publish [layout] &lt;title&gt; 就會發現草稿的檔案和相關連資料夾會一起移動到 _posts 資料夾 另外也可以手動搬移，只要從 _drafts 把文章放到 _posts 資料夾內就可以了 新增文章在 Bash 輸入指令後會建立在 source / _posts / 資料夾內 1hexo new 文章名稱 文章都是用 Markdown 語法撰寫 刪除文章 只要到 source / _post 刪除本地文件 執行清除資料夾再上傳，文章就會不見了 123hexo cleanhexo ghexo d 建立頁面和文章不同，這是在建立 theme 的 menu 頁面 archives、categories、tags、about … 在沒建立前，新增的 menu 都會出現 404 頁面 所以在 _config.yml 內 12345678910menu: Home: / # 下面新增的 menu ，都需要產生頁面 Archives: /archives Categories: /categories Tags: /tags About: /about Link: /link ... 在 Bash 執行產生 1hexo new page 頁面名稱 需要在這些頁面隱藏留言、評論功能時，就需加上 comments: false 關閉 123title: categoriesdate: 2020-03-07 12:34:56comments: false categories 分類頁面在 Bash 輸入 1hexo new page categories 在產生的 source/categories/inex.md 儲存以下內容 123title: categoriesdate: 2020-03-07 22:52:41type: &quot;categories&quot; 如何使用分類，只要在文章開頭加上 categories 和分類名稱就可以了 若是有 2 個以上分類時注意，要使用中括號 “ [ ] “ ，陣列型式包著分類名稱 123456789101112131415# 陣列中只有一個名稱時，像下面例子會是 2 個分類categories: - [Dog] - [Cat] # 陣列中有 2 個名稱時，這會是一個有上下層關連的分類categories:- [Animal, Dog] # Animal 是父層，Dog 是子層- [Animal, Cat]# 錯誤的分類，沒使用中括號時 Dog 是父層、 Cat 是在 Dog 下的子層# 像下面例子就只會是 1 個分類categories: - Dog - Cat tags 頁面在 Bash 輸入 1hexo new page tags 在產生的 source/tags/inex.md 儲存以下內容 123title: tagsdate: 2019-04-01 22:55:41type: \"tags\" 在文章開頭加上 tags 和標籤，當多個標籤時只要像下面作法就可以了 1234567891011# 一個 tagtags: Dog# 多個 tagtags:- Dog- Cat- Bear- Fox- Bat- Deer about 關於頁面1hexo new page about 編輯 source /about/ index.md 內容 若是沒出現 about 選單的話，可能是沒開啟 about 頁 到 themes/ 套用版型名稱 /_config.yml 移除 menu &gt; about 前的 # 註解就會看到 12menu: about: /about","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"設定","slug":"Hexo/設定","permalink":"https://orandigo.github.io/categories/Hexo/%E8%A8%AD%E5%AE%9A/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"安裝 Hexo","slug":"20200301-hexo","date":"2020-03-01T11:47:27.000Z","updated":"2020-05-17T17:03:08.687Z","comments":true,"path":"2020/03/01/20200301-hexo/","link":"","permalink":"https://orandigo.github.io/2020/03/01/20200301-hexo/","excerpt":"Hexo需要使用到基本 git 上傳指令以及修改 Yaml 格式環境設定 文章撰寫使用 Markdown 格式 http://markdown.tw/","text":"Hexo需要使用到基本 git 上傳指令以及修改 Yaml 格式環境設定 文章撰寫使用 Markdown 格式 http://markdown.tw/ Hexo 安裝 必需在 Node.js 環境下 123456# hexo CLI - Hexo 指令工具npm install -g hexo-cli# hexo 自動部署工具# 出現 ERROR Deployer not found: git 的錯誤時就需要安裝npm install hexo-deployer-git --save 建立一個 Hexo 雛形 12hexo initnpm install 開啟本地預覽 打開 http://localhost:4000 就可看到建立好的網頁 下方有詳細說明 1hexo server 到這裡為止就完成一個可觀看的簡單 Hexo 頁面 在部署 Hexo 到 GitHub 上前，要先上傳 Hexo 原始碼到 branch: master 分支 之後才部署 Hexo 編譯後的頁面到 branch: gh-pages 分支 部署至 GitHub branch: gh-pages 分支 上傳前先修改 _config.yml 的 deploy 1234deploy: type: git repo: git@github.com: UserName / repository .git branch: gh-pages 12hexo g # 生成 public 靜態檔案hexo d # 部署至 Github Pages 部署兩個站點 12# 絕對路徑改成相對路徑，修改 _config.ymlrelative_link: true 更新內容上傳 12345hexo ghexo d# 或是只執行下面一行也可以hexo d -g 上傳出錯時可能的問題 靜態檔案 public 生成出錯 - 只要清除先前建立的靜態檔案，再重新生成一次後上傳 123hexo cl # 清除之前建立的靜態檔案，也可以輸入 hexo cleanhexo g # 建立靜態檔案 [在 /public 資料夾內]，也可以輸入 hexo generatehexo d # 部署到 Github Pages，也可以輸入 hexo deploy 其他指令 建立新的空文章格式 1hexo new \"My_New_Post\" git 上傳 Hexo 原始碼 git 基本只會用到的指令 1234567891011121314151617# 本地端git initgit add.git commit -m \"git init\"# 上傳到 Github# push branch: master → 原始碼# git remote add origin git@github.com:Wcc723/hexo-demo-1114.git // 儲存庫路徑git remote add origin 儲存庫路徑 # 這裡要修改上傳的儲存庫路徑# git push -u origin master // branch:mastergit push -u origin master# 出錯問題# 推到 Git 出錯 - 有可能是先前資料卡住，先刪記錄後再推一次git remote rm origin# 再不能上傳, 有可能是金鑰錯誤# https://help.github.com/articles/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent/ 開啟本地預覽 server1hexo server 預設 http://localhost:4000 參數 -p 、 -port 變更設定 PORT 12hexo server -p 1599# 變更後開啟 server =&gt; http://localhost:1599 -s 、 -static 只觀看 public 內已建立的靜態檔案 -l 、 -log 開啟記錄，預設會覆寫記錄 -g 、 -generate 在啟動 server 前先建立靜態檔案 -i 自訂 IP ，預設 0.0.0.0 。設定後就不能用 127.0.0.1 、 localhost 1hexo server -i 192.168.1.1","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"設定","slug":"Hexo/設定","permalink":"https://orandigo.github.io/categories/Hexo/%E8%A8%AD%E5%AE%9A/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Chart.js 自訂設計 (一)","slug":"20200223-chartjs","date":"2020-02-23T15:43:26.000Z","updated":"2020-03-15T16:42:09.955Z","comments":true,"path":"2020/02/23/20200223-chartjs/","link":"","permalink":"https://orandigo.github.io/2020/02/23/20200223-chartjs/","excerpt":"Chart.js 自訂設計 type 是圖表的樣式 \u0016樣式有線圖、長條圖、圓餅圖、雷達圖 … 可使用樣式: https://www.chartjs.org/docs/latest/charts/ data 內放的是要用圖表呈現的資料名稱、數值 options 是設定個別樣式","text":"Chart.js 自訂設計 type 是圖表的樣式 \u0016樣式有線圖、長條圖、圓餅圖、雷達圖 … 可使用樣式: https://www.chartjs.org/docs/latest/charts/ data 內放的是要用圖表呈現的資料名稱、數值 options 是設定個別樣式 1234567891011121314151617181920var ctx = document.getElementById('myChart').getContext('2d');var chart = new Chart(ctx, &#123; type: 'line', data: &#123; // 要呈現的資料 labels: ['1月', '2月', '3月', '4月', '5月'], // 水平軸 datasets: [ &#123; label: 'Apple', // 資料的標題標籤 data: [10, 15, 20, 25, 30] &#125;,&#123; label: 'Pear', data: [3, 6, 9, 12, 15] &#125; ] &#125; options: &#123; // 自訂屬性設定 &#125;&#125;); 標題123456789options: &#123; title: &#123; display: true, text: '農場收成量', fontColor: 'blue', fontSize: '24', position: 'bottom', // 標題位置 &#125;&#125; 資料的標題標籤123456options: &#123; legend: &#123; // 資料標籤的位置 display: true, position: 'right' &#125;&#125; 垂直軸標籤123456789101112131415161718192021222324options: &#123; scales: &#123; // 縮放屬性 yAxes: [&#123; // 設定垂直軸 [使用陣列方式] type: 'myScale', // this is the same key that was passed to the registerScaleType function ticks: &#123; // 設定間隔數值 // 固定數值 min: 0, // 最小是 0 max: 2000, // 建議數值 suggestedMin: 0, suggestedMax: 2000, // 值間隔 stepSize: 400, // 增加數值文字 callback: function (value, index, values) &#123; return value + '萬顆'; &#125; &#125; &#125;] &#125;&#125; 相關說明https://www.chartjs.org/docs/latest/developers/axes.html 動畫效果123456options: &#123; animation: &#123; duration: 1000, easing: 'easeOutQuart' &#125;&#125; 動畫相關說明https://www.chartjs.org/docs/latest/configuration/animations.html easing 屬性還有其他可使用項目https://www.chartjs.org/docs/latest/configuration/animations.html#easing","categories":[{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"library","slug":"JavaScript/library","permalink":"https://orandigo.github.io/categories/JavaScript/library/"},{"name":"圖表類","slug":"類型/圖表類","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/%E5%9C%96%E8%A1%A8%E9%A1%9E/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]},{"title":"Chart.js 圖表繪製","slug":"20200216-chartjs","date":"2020-02-16T15:23:47.000Z","updated":"2020-03-15T14:41:53.062Z","comments":true,"path":"2020/02/16/20200216-chartjs/","link":"","permalink":"https://orandigo.github.io/2020/02/16/20200216-chartjs/","excerpt":"這是使用 &lt;canvas&gt; tag 繪製的圖表 JavaScript library 簡單又容易應用，也支援動畫的效果","text":"這是使用 &lt;canvas&gt; tag 繪製的圖表 JavaScript library 簡單又容易應用，也支援動畫的效果 載入 Chart.js 下載 到 Chart.js 下載 GitHub 下載 CDNJS 12&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"path/to/chartjs/dist/Chart.min.css\"&gt;&lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.3/Chart.js\"&gt;&lt;/script&gt; npm 1npm install chart.js --save Bower 1bower install chart.js --save 載入的模組有 2 種 Stand-Alone Build : 不包括 Moment.js，若是會使用到時間軸就必需額外再下載 Bundled Build : 包括 Chart.js 專用的 Moment.js 若是先前已經載入過 Moment.js ，為了避免衝突出錯就不建議使用 Bundled Build 會在圖表以外使用時間軸功能，建議是用 Stand-Alone Build 再另外載入 Moment.js 基本的 Chart 圖表在 HTML 建立 &lt;canvas&gt; 1&lt;canvas id=\"myChart\" width=\"400\" height=\"300\"&gt;&lt;/canvas&gt; 12345678910111213141516171819202122232425262728293031323334353637383940var ctx = document.getElementById('myChart').getContext('2d');var myChart = new Chart(ctx, &#123; // 各式圖表的屬性設定 type: 'bar', data: &#123; labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'], datasets: [&#123; label: '# of Votes', data: [12, 19, 3, 5, 2, 3], backgroundColor: [ 'rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)' ], borderColor: [ 'rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)' ], borderWidth: 1 &#125;] &#125;, options: &#123; scales: &#123; yAxes: [&#123; ticks: &#123; beginAtZero: true &#125; &#125;] &#125; &#125; &#125;); 參數設定 可設定視覺樣式、觸發事件、互動效果，關於參數設定可參考 文件 Web Accessibility 無障礙輔助功能 : 可在 HTML 標籤內加入 role、aria-label 的輔助功能 HTML &lt;canvas&gt; Accessibility 相關連接 Chart.js: https://www.chartjs.org/ GitHub: https://github.com/chartjs/Chart.js 使用說明 https://www.chartjs.org/docs/latest/ GitBook 簡體中文: https://chartjs-doc.abingoal.com/","categories":[{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"library","slug":"JavaScript/library","permalink":"https://orandigo.github.io/categories/JavaScript/library/"},{"name":"圖表類","slug":"類型/圖表類","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/%E5%9C%96%E8%A1%A8%E9%A1%9E/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]}],"categories":[{"name":"CSS","slug":"CSS","permalink":"https://orandigo.github.io/categories/CSS/"},{"name":"屬性","slug":"CSS/屬性","permalink":"https://orandigo.github.io/categories/CSS/%E5%B1%AC%E6%80%A7/"},{"name":"jQuery","slug":"jQuery","permalink":"https://orandigo.github.io/categories/jQuery/"},{"name":"library","slug":"jQuery/library","permalink":"https://orandigo.github.io/categories/jQuery/library/"},{"name":"實例","slug":"CSS/實例","permalink":"https://orandigo.github.io/categories/CSS/%E5%AF%A6%E4%BE%8B/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://orandigo.github.io/categories/JavaScript/"},{"name":"函式","slug":"JavaScript/函式","permalink":"https://orandigo.github.io/categories/JavaScript/%E5%87%BD%E5%BC%8F/"},{"name":"功能","slug":"CSS/功能","permalink":"https://orandigo.github.io/categories/CSS/%E5%8A%9F%E8%83%BD/"},{"name":"插件","slug":"CSS/插件","permalink":"https://orandigo.github.io/categories/CSS/%E6%8F%92%E4%BB%B6/"},{"name":"屬性","slug":"JavaScript/屬性","permalink":"https://orandigo.github.io/categories/JavaScript/%E5%B1%AC%E6%80%A7/"},{"name":"library","slug":"JavaScript/library","permalink":"https://orandigo.github.io/categories/JavaScript/library/"},{"name":"類型","slug":"類型","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/"},{"name":"表格類","slug":"類型/表格類","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/%E8%A1%A8%E6%A0%BC%E9%A1%9E/"},{"name":"Line Notify","slug":"類型/Line-Notify","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/Line-Notify/"},{"name":"GAS","slug":"類型/GAS","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/GAS/"},{"name":"Vue","slug":"Vue","permalink":"https://orandigo.github.io/categories/Vue/"},{"name":"筆記","slug":"Vue/筆記","permalink":"https://orandigo.github.io/categories/Vue/%E7%AD%86%E8%A8%98/"},{"name":"Hexo","slug":"Hexo","permalink":"https://orandigo.github.io/categories/Hexo/"},{"name":"設定","slug":"Hexo/設定","permalink":"https://orandigo.github.io/categories/Hexo/%E8%A8%AD%E5%AE%9A/"},{"name":"工具","slug":"Hexo/工具","permalink":"https://orandigo.github.io/categories/Hexo/%E5%B7%A5%E5%85%B7/"},{"name":"圖表類","slug":"類型/圖表類","permalink":"https://orandigo.github.io/categories/%E9%A1%9E%E5%9E%8B/%E5%9C%96%E8%A1%A8%E9%A1%9E/"}],"tags":[{"name":"w3HexSchool","slug":"w3HexSchool","permalink":"https://orandigo.github.io/tags/w3HexSchool/"}]}